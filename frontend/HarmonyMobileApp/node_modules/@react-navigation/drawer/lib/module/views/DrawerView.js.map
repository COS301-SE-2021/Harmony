{"version":3,"sources":["DrawerView.tsx"],"names":["React","View","StyleSheet","I18nManager","Platform","BackHandler","ScreenContainer","screensEnabled","NavigationHelpersContext","NavigationContext","NavigationRouteContext","DrawerActions","useTheme","GestureHandlerRootView","SafeAreaProviderCompat","ResourceSavingScene","Header","DrawerContent","Drawer","DrawerOpenContext","DrawerPositionContext","useWindowDimensions","getIsDrawerOpenFromState","getDefaultDrawerWidth","height","width","smallerAxisSize","Math","min","isLandscape","isTablet","appBarHeight","OS","maxWidth","GestureHandlerWrapper","DrawerView","state","navigation","descriptors","lazy","drawerContent","props","drawerPosition","isRTL","keyboardDismissMode","overlayColor","drawerType","hideStatusBar","statusBarAnimation","drawerContentOptions","drawerStyle","edgeWidth","gestureHandlerProps","minSwipeDistance","sceneContainerStyle","detachInactiveScreens","loaded","setLoaded","useState","routes","index","key","dimensions","colors","isDrawerOpen","handleDrawerOpen","useCallback","dispatch","openDrawer","target","handleDrawerClose","closeDrawer","useEffect","handleClose","isFocused","handleEscape","e","subscription","addEventListener","document","body","remove","removeEventListener","focusedRouteKey","includes","renderNavigationView","progress","renderContent","isScreensEnabled","styles","content","map","route","descriptor","unmountOnBlur","options","header","headerShown","absoluteFill","opacity","layout","scene","render","activeKey","gestureEnabled","swipeEnabled","backgroundColor","background","card","borderRightColor","border","borderRightWidth","hairlineWidth","borderLeftColor","borderLeftWidth","create","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  BackHandler,\n} from 'react-native';\nimport { ScreenContainer, screensEnabled } from 'react-native-screens';\nimport {\n  NavigationHelpersContext,\n  NavigationContext,\n  NavigationRouteContext,\n  DrawerNavigationState,\n  DrawerActions,\n  useTheme,\n  ParamListBase,\n} from '@react-navigation/native';\n\nimport { GestureHandlerRootView } from './GestureHandler';\nimport SafeAreaProviderCompat from './SafeAreaProviderCompat';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport Header from './Header';\nimport DrawerContent from './DrawerContent';\nimport Drawer from './Drawer';\nimport DrawerOpenContext from '../utils/DrawerOpenContext';\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\nimport useWindowDimensions from '../utils/useWindowDimensions';\nimport getIsDrawerOpenFromState from '../utils/getIsDrawerOpenFromState';\nimport type {\n  DrawerDescriptorMap,\n  DrawerNavigationConfig,\n  DrawerNavigationHelpers,\n  DrawerContentComponentProps,\n  DrawerHeaderProps,\n} from '../types';\n\ntype Props = DrawerNavigationConfig & {\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\nconst getDefaultDrawerWidth = ({\n  height,\n  width,\n}: {\n  height: number;\n  width: number;\n}) => {\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/components/navigation-drawer\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n  const maxWidth = isTablet ? 320 : 280;\n\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Component that renders the drawer.\n */\nexport default function DrawerView({\n  state,\n  navigation,\n  descriptors,\n  lazy = true,\n  drawerContent = (props: DrawerContentComponentProps) => (\n    <DrawerContent {...props} />\n  ),\n  drawerPosition = I18nManager.isRTL ? 'right' : 'left',\n  keyboardDismissMode = 'on-drag',\n  overlayColor = 'rgba(0, 0, 0, 0.5)',\n  drawerType = 'front',\n  hideStatusBar = false,\n  statusBarAnimation = 'slide',\n  drawerContentOptions,\n  drawerStyle,\n  edgeWidth,\n  gestureHandlerProps,\n  minSwipeDistance,\n  sceneContainerStyle,\n  detachInactiveScreens = true,\n}: Props) {\n  const [loaded, setLoaded] = React.useState([state.routes[state.index].key]);\n  const dimensions = useWindowDimensions();\n\n  const { colors } = useTheme();\n\n  const isDrawerOpen = getIsDrawerOpenFromState(state);\n\n  const handleDrawerOpen = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  const handleDrawerClose = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  React.useEffect(() => {\n    if (!isDrawerOpen || drawerType === 'permanent') {\n      return;\n    }\n\n    const handleClose = () => {\n      // We shouldn't handle the back button if the parent screen isn't focused\n      // This will avoid the drawer overriding event listeners from a focused screen\n      if (!navigation.isFocused()) {\n        return false;\n      }\n\n      handleDrawerClose();\n\n      return true;\n    };\n\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        handleClose();\n      }\n    };\n\n    // We only add the listeners when drawer opens\n    // This way we can make sure that the listener is added as late as possible\n    // This will make sure that our handler will run first when back button is pressed\n    const subscription = BackHandler.addEventListener(\n      'hardwareBackPress',\n      handleClose\n    );\n\n    if (Platform.OS === 'web') {\n      document?.body?.addEventListener?.('keyup', handleEscape);\n    }\n\n    return () => {\n      subscription.remove();\n\n      if (Platform.OS === 'web') {\n        document?.body?.removeEventListener?.('keyup', handleEscape);\n      }\n    };\n  }, [drawerType, handleDrawerClose, isDrawerOpen, navigation]);\n\n  const focusedRouteKey = state.routes[state.index].key;\n\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([...loaded, focusedRouteKey]);\n  }\n\n  const renderNavigationView = ({ progress }: any) => {\n    return (\n      <DrawerPositionContext.Provider value={drawerPosition}>\n        {drawerContent({\n          ...drawerContentOptions,\n          progress: progress,\n          state: state,\n          navigation: navigation,\n          descriptors: descriptors,\n        })}\n      </DrawerPositionContext.Provider>\n    );\n  };\n\n  const renderContent = () => {\n    const isScreensEnabled = screensEnabled?.() && detachInactiveScreens;\n\n    return (\n      // @ts-ignore\n      <ScreenContainer enabled={isScreensEnabled} style={styles.content}>\n        {state.routes.map((route, index) => {\n          const descriptor = descriptors[route.key];\n          const { unmountOnBlur } = descriptor.options;\n          const isFocused = state.index === index;\n\n          if (unmountOnBlur && !isFocused) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(route.key) && !isFocused) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          const {\n            header = (props: DrawerHeaderProps) => <Header {...props} />,\n            headerShown = false,\n          } = descriptor.options;\n\n          return (\n            <ResourceSavingScene\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { opacity: isFocused ? 1 : 0 }]}\n              isVisible={isFocused}\n              enabled={isScreensEnabled}\n            >\n              {headerShown ? (\n                <NavigationContext.Provider value={descriptor.navigation}>\n                  <NavigationRouteContext.Provider value={route}>\n                    {header({\n                      layout: dimensions,\n                      scene: { route, descriptor },\n                    })}\n                  </NavigationRouteContext.Provider>\n                </NavigationContext.Provider>\n              ) : null}\n              {descriptor.render()}\n            </ResourceSavingScene>\n          );\n        })}\n      </ScreenContainer>\n    );\n  };\n\n  const activeKey = state.routes[state.index].key;\n  const { gestureEnabled, swipeEnabled } = descriptors[activeKey].options;\n\n  return (\n    <NavigationHelpersContext.Provider value={navigation}>\n      <GestureHandlerWrapper style={styles.content}>\n        <SafeAreaProviderCompat>\n          <DrawerOpenContext.Provider value={isDrawerOpen}>\n            <Drawer\n              open={isDrawerOpen}\n              gestureEnabled={gestureEnabled}\n              swipeEnabled={swipeEnabled}\n              onOpen={handleDrawerOpen}\n              onClose={handleDrawerClose}\n              gestureHandlerProps={gestureHandlerProps}\n              drawerType={drawerType}\n              drawerPosition={drawerPosition}\n              sceneContainerStyle={[\n                { backgroundColor: colors.background },\n                sceneContainerStyle,\n              ]}\n              drawerStyle={[\n                {\n                  width: getDefaultDrawerWidth(dimensions),\n                  backgroundColor: colors.card,\n                },\n                drawerType === 'permanent' &&\n                  (drawerPosition === 'left'\n                    ? {\n                        borderRightColor: colors.border,\n                        borderRightWidth: StyleSheet.hairlineWidth,\n                      }\n                    : {\n                        borderLeftColor: colors.border,\n                        borderLeftWidth: StyleSheet.hairlineWidth,\n                      }),\n                drawerStyle,\n              ]}\n              overlayStyle={{ backgroundColor: overlayColor }}\n              swipeEdgeWidth={edgeWidth}\n              swipeDistanceThreshold={minSwipeDistance}\n              hideStatusBar={hideStatusBar}\n              statusBarAnimation={statusBarAnimation}\n              renderDrawerContent={renderNavigationView}\n              renderSceneContent={renderContent}\n              keyboardDismissMode={keyboardDismissMode}\n              dimensions={dimensions}\n            />\n          </DrawerOpenContext.Provider>\n        </SafeAreaProviderCompat>\n      </GestureHandlerWrapper>\n    </NavigationHelpersContext.Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"]}