{"version":3,"sources":["Drawer.tsx"],"names":["React","StyleSheet","I18nManager","Platform","Keyboard","StatusBar","View","InteractionManager","TouchableWithoutFeedback","Animated","PanGestureHandler","TapGestureHandler","GestureState","Overlay","Clock","Value","onChange","clockRunning","startClock","stopClock","spring","abs","add","and","block","call","cond","divide","eq","event","greaterThan","lessThan","max","min","multiply","neq","or","set","sub","TRUE","FALSE","NOOP","UNSET","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_THRESHOLD_DEFAULT","SWIPE_DISTANCE_MINIMUM","DEFAULT_DRAWER_WIDTH","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","ANIMATED_ZERO","ANIMATED_ONE","DrawerView","Component","interactionHandle","undefined","clearInteractionHandle","createInteractionHandle","drawerStyle","dimensions","props","width","flatten","endsWith","percentage","Number","replace","isFinite","drawerType","open","getDrawerWidth","UNDETERMINED","initialDrawerWidth","drawerPosition","isDrawerTypeFront","touchX","gestureX","drawerWidth","containerWidth","swipeDistanceThreshold","swipeVelocityThreshold","isOpen","toValue","frameTime","state","position","time","finished","velocity","clock","velocityX","handleStartInteraction","manuallyTriggerSpring","offsetX","value","Boolean","handleEndInteraction","toggleDrawer","currentOpenValue","onOpen","onClose","pendingOpenValue","forceUpdate","nextIsOpen","isSwiping","keyboardDismissMode","dismiss","toggleStatusBar","gestureState","ACTIVE","touchDistanceFromDrawer","transitionTo","dragX","translateX","nativeEvent","x","translationX","s","oldState","e","setValue","layout","requestAnimationFrame","drawerOpacity","hidden","hideStatusBar","statusBarAnimation","isStatusBarHidden","setHidden","componentDidUpdate","prevProps","componentWillUnmount","render","gestureEnabled","swipeEnabled","swipeEdgeWidth","sceneContainerStyle","overlayStyle","renderDrawerContent","renderSceneContent","gestureHandlerProps","isRight","contentTranslateX","drawerTranslateX","isRTL","offset","hitSlop","right","left","progress","handleGestureEvent","handleGestureStateChange","handleContainerLayout","styles","main","flexDirection","content","transform","OS","handleTapStateChange","handleDrawerLayout","container","opacity","nonPermanent","zIndex","create","backgroundColor","maxWidth","top","bottom","flex","select","web","default","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  ViewStyle,\n  LayoutChangeEvent,\n  I18nManager,\n  Platform,\n  Keyboard,\n  StatusBar,\n  StyleProp,\n  View,\n  InteractionManager,\n  TouchableWithoutFeedback,\n} from 'react-native';\nimport Animated from 'react-native-reanimated';\nimport {\n  PanGestureHandler,\n  TapGestureHandler,\n  GestureState,\n} from './GestureHandler';\nimport Overlay from './Overlay';\n\nconst {\n  Clock,\n  Value,\n  onChange,\n  clockRunning,\n  startClock,\n  stopClock,\n  spring,\n  abs,\n  add,\n  and,\n  block,\n  call,\n  cond,\n  divide,\n  eq,\n  event,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  or,\n  set,\n  sub,\n} = Animated;\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\n\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\n\nconst SWIPE_DISTANCE_THRESHOLD_DEFAULT = 60;\nconst SWIPE_DISTANCE_MINIMUM = 5;\n\nconst DEFAULT_DRAWER_WIDTH = '80%';\n\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01,\n};\n\nconst ANIMATED_ZERO = new Animated.Value(0);\nconst ANIMATED_ONE = new Animated.Value(1);\n\ntype Binary = 0 | 1;\n\ntype Renderer = (props: { progress: Animated.Node<number> }) => React.ReactNode;\n\ntype Props = {\n  open: boolean;\n  onOpen: () => void;\n  onClose: () => void;\n  gestureEnabled: boolean;\n  swipeEnabled: boolean;\n  drawerPosition: 'left' | 'right';\n  drawerType: 'front' | 'back' | 'slide' | 'permanent';\n  keyboardDismissMode: 'none' | 'on-drag';\n  swipeEdgeWidth: number;\n  swipeDistanceThreshold?: number;\n  swipeVelocityThreshold: number;\n  hideStatusBar: boolean;\n  statusBarAnimation: 'slide' | 'none' | 'fade';\n  overlayStyle?: StyleProp<ViewStyle>;\n  drawerStyle?: StyleProp<ViewStyle>;\n  sceneContainerStyle?: StyleProp<ViewStyle>;\n  renderDrawerContent: Renderer;\n  renderSceneContent: Renderer;\n  gestureHandlerProps?: React.ComponentProps<typeof PanGestureHandler>;\n  dimensions: { width: number; height: number };\n};\n\nexport default class DrawerView extends React.Component<Props> {\n  static defaultProps = {\n    drawerPosition: I18nManager.isRTL ? 'left' : 'right',\n    drawerType: 'front',\n    gestureEnabled: true,\n    swipeEnabled:\n      Platform.OS !== 'web' &&\n      Platform.OS !== 'windows' &&\n      Platform.OS !== 'macos',\n    swipeEdgeWidth: 32,\n    swipeVelocityThreshold: 500,\n    keyboardDismissMode: 'on-drag',\n    hideStatusBar: false,\n    statusBarAnimation: 'slide',\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      open,\n      drawerPosition,\n      drawerType,\n      swipeDistanceThreshold,\n      swipeVelocityThreshold,\n      hideStatusBar,\n    } = this.props;\n\n    if (\n      // If we're not in the middle of a transition, sync the drawer's open state\n      typeof this.pendingOpenValue !== 'boolean' ||\n      open !== this.pendingOpenValue\n    ) {\n      this.toggleDrawer(open);\n    }\n\n    this.pendingOpenValue = undefined;\n\n    if (open !== prevProps.open && hideStatusBar) {\n      this.toggleStatusBar(open);\n    }\n\n    if (prevProps.drawerPosition !== drawerPosition) {\n      this.drawerPosition.setValue(\n        drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n      );\n    }\n\n    if (prevProps.drawerType !== drawerType) {\n      this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n    }\n\n    if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n      this.swipeDistanceThreshold.setValue(\n        swipeDistanceThreshold !== undefined\n          ? swipeDistanceThreshold\n          : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n      );\n    }\n\n    if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n      this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n    }\n  }\n\n  componentWillUnmount() {\n    this.toggleStatusBar(false);\n    this.handleEndInteraction();\n  }\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private getDrawerWidth = (): number => {\n    const { drawerStyle, dimensions } = this.props;\n    const { width = DEFAULT_DRAWER_WIDTH } =\n      StyleSheet.flatten(drawerStyle) || {};\n\n    if (typeof width === 'string' && width.endsWith('%')) {\n      // Try to calculate width if a percentage is given\n      const percentage = Number(width.replace(/%$/, ''));\n\n      if (Number.isFinite(percentage)) {\n        return dimensions.width * (percentage / 100);\n      }\n    }\n\n    return typeof width === 'number' ? width : 0;\n  };\n\n  private clock = new Clock();\n  private interactionHandle: number | undefined;\n\n  private isDrawerTypeFront = new Value<Binary>(\n    this.props.drawerType === 'front' ? TRUE : FALSE\n  );\n\n  private isOpen = new Value<Binary>(this.props.open ? TRUE : FALSE);\n  private nextIsOpen = new Value<Binary | -1>(UNSET);\n  private isSwiping = new Value<Binary>(FALSE);\n\n  private initialDrawerWidth = this.getDrawerWidth();\n\n  private gestureState = new Value<number>(GestureState.UNDETERMINED);\n  private touchX = new Value<number>(0);\n  private velocityX = new Value<number>(0);\n  private gestureX = new Value<number>(0);\n  private offsetX = new Value<number>(0);\n  private position = new Value<number>(\n    this.props.open\n      ? this.initialDrawerWidth *\n        (this.props.drawerPosition === 'right'\n          ? DIRECTION_RIGHT\n          : DIRECTION_LEFT)\n      : 0\n  );\n\n  private containerWidth = new Value<number>(this.props.dimensions.width);\n  private drawerWidth = new Value<number>(this.initialDrawerWidth);\n  private drawerOpacity = new Value<number>(\n    this.props.drawerType === 'permanent' ? 1 : 0\n  );\n  private drawerPosition = new Value<number>(\n    this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n  );\n\n  // Comment stolen from react-native-gesture-handler/DrawerLayout\n  //\n  // While closing the drawer when user starts gesture outside of its area (in greyed\n  // out part of the window), we want the drawer to follow only once finger reaches the\n  // edge of the drawer.\n  // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n  // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n  // an arrow pointing left\n  // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    +---------------+    +---------------+    +---------------+    +---------------+\n  //\n  // For the above to work properly we define animated value that will keep start position\n  // of the gesture. Then we use that value to calculate how much we need to subtract from\n  // the dragX. If the gesture started on the greyed out area we take the distance from the\n  // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n  // drawer be pulled back as soon as you start the pan.\n  //\n  // This is used only when drawerType is \"front\"\n  private touchDistanceFromDrawer = cond(\n    this.isDrawerTypeFront,\n    cond(\n      eq(this.drawerPosition, DIRECTION_LEFT),\n      max(\n        // Distance of touch start from left screen edge - Drawer width\n        sub(sub(this.touchX, this.gestureX), this.drawerWidth),\n        0\n      ),\n      min(\n        multiply(\n          // Distance of drawer from left screen edge - Touch start point\n          sub(\n            sub(this.containerWidth, this.drawerWidth),\n            sub(this.touchX, this.gestureX)\n          ),\n          DIRECTION_RIGHT\n        ),\n        0\n      )\n    ),\n    0\n  );\n\n  private swipeDistanceThreshold = new Value<number>(\n    this.props.swipeDistanceThreshold !== undefined\n      ? this.props.swipeDistanceThreshold\n      : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n  );\n  private swipeVelocityThreshold = new Value<number>(\n    this.props.swipeVelocityThreshold\n  );\n\n  private currentOpenValue: boolean = this.props.open;\n  private pendingOpenValue: boolean | undefined;\n\n  private isStatusBarHidden: boolean = false;\n\n  private manuallyTriggerSpring = new Value<Binary>(FALSE);\n\n  private transitionTo = (isOpen: number | Animated.Node<number>) => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n\n    const state = {\n      position: this.position,\n      time: new Value(0),\n      finished: new Value(FALSE),\n      velocity: new Value(0),\n    };\n\n    return block([\n      cond(clockRunning(this.clock), NOOP, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(toValue, multiply(isOpen, this.drawerWidth, this.drawerPosition)),\n        set(frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, FALSE),\n        set(state.velocity, this.velocityX),\n        set(this.isOpen, isOpen),\n        startClock(this.clock),\n        call([], this.handleStartInteraction),\n        set(this.manuallyTriggerSpring, FALSE),\n      ]),\n      spring(this.clock, state, { ...SPRING_CONFIG, toValue }),\n      cond(state.finished, [\n        // Reset gesture and velocity from previous gesture\n        set(this.touchX, 0),\n        set(this.gestureX, 0),\n        set(this.velocityX, 0),\n        set(this.offsetX, 0),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n        call([this.isOpen], ([value]: readonly Binary[]) => {\n          const open = Boolean(value);\n          this.handleEndInteraction();\n\n          if (open !== this.props.open) {\n            // Sync drawer's state after animation finished\n            // This shouldn't be necessary, but there seems to be an issue on iOS\n            this.toggleDrawer(this.props.open);\n          }\n        }),\n      ]),\n    ]);\n  };\n\n  private dragX = block([\n    onChange(\n      this.isOpen,\n      call([this.isOpen], ([value]: readonly Binary[]) => {\n        const open = Boolean(value);\n\n        this.currentOpenValue = open;\n\n        // Without this check, the drawer can go to an infinite update <-> animate loop for sync updates\n        if (open !== this.props.open) {\n          // If the mode changed, update state\n          if (open) {\n            this.props.onOpen();\n          } else {\n            this.props.onClose();\n          }\n\n          this.pendingOpenValue = open;\n\n          // Force componentDidUpdate to fire, whether user does a setState or not\n          // This allows us to detect when the user drops the update and revert back\n          // It's necessary to make sure that the state stays in sync\n          this.forceUpdate();\n        }\n      })\n    ),\n    onChange(\n      this.nextIsOpen,\n      cond(neq(this.nextIsOpen, UNSET), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), stopClock(this.clock)),\n        // Update the open value to trigger the transition\n        set(this.isOpen, this.nextIsOpen),\n        set(this.gestureX, 0),\n        set(this.nextIsOpen, UNSET),\n      ])\n    ),\n    // This block must be after the this.isOpen listener since we check for current value\n    onChange(\n      this.isSwiping,\n      // Listen to updates for this value only when it changes\n      // Without `onChange`, this will fire even if the value didn't change\n      // We don't want to call the listeners if the value didn't change\n      call([this.isSwiping], ([value]: readonly Binary[]) => {\n        const { keyboardDismissMode } = this.props;\n\n        if (value === TRUE) {\n          if (keyboardDismissMode === 'on-drag') {\n            Keyboard.dismiss();\n          }\n\n          this.toggleStatusBar(true);\n        } else {\n          this.toggleStatusBar(this.currentOpenValue);\n        }\n      })\n    ),\n    onChange(\n      this.gestureState,\n      cond(\n        eq(this.gestureState, GestureState.ACTIVE),\n        call([], this.handleStartInteraction)\n      )\n    ),\n    cond(\n      eq(this.gestureState, GestureState.ACTIVE),\n      [\n        cond(this.isSwiping, NOOP, [\n          // We weren't dragging before, set it to true\n          set(this.isSwiping, TRUE),\n          // Also update the drag offset to the last position\n          set(this.offsetX, this.position),\n        ]),\n        // Update position with previous offset + gesture distance\n        set(\n          this.position,\n          add(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)\n        ),\n        // Stop animations while we're dragging\n        stopClock(this.clock),\n      ],\n      [\n        set(this.isSwiping, FALSE),\n        set(this.touchX, 0),\n        this.transitionTo(\n          cond(\n            this.manuallyTriggerSpring,\n            this.isOpen,\n            cond(\n              or(\n                and(\n                  greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM),\n                  greaterThan(abs(this.velocityX), this.swipeVelocityThreshold)\n                ),\n                greaterThan(abs(this.gestureX), this.swipeDistanceThreshold)\n              ),\n              cond(\n                eq(this.drawerPosition, DIRECTION_LEFT),\n                // If swiped to right, open the drawer, otherwise close it\n                greaterThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                ),\n                // If swiped to left, open the drawer, otherwise close it\n                lessThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                )\n              ),\n              this.isOpen\n            )\n          )\n        ),\n      ]\n    ),\n    this.position,\n  ]);\n\n  private translateX = cond(\n    eq(this.drawerPosition, DIRECTION_RIGHT),\n    min(max(multiply(this.drawerWidth, -1), this.dragX), 0),\n    max(min(this.drawerWidth, this.dragX), 0)\n  );\n\n  private progress = cond(\n    // Check if the drawer width is available to avoid division by zero\n    eq(this.drawerWidth, 0),\n    0,\n    abs(divide(this.translateX, this.drawerWidth))\n  );\n\n  private handleGestureEvent = event([\n    {\n      nativeEvent: {\n        x: this.touchX,\n        translationX: this.gestureX,\n        velocityX: this.velocityX,\n      },\n    },\n  ]);\n\n  private handleGestureStateChange = event([\n    {\n      nativeEvent: {\n        state: (s: Animated.Value<number>) => set(this.gestureState, s),\n      },\n    },\n  ]);\n\n  private handleTapStateChange = event([\n    {\n      nativeEvent: {\n        oldState: (s: Animated.Value<number>) =>\n          cond(\n            eq(s, GestureState.ACTIVE),\n            set(this.manuallyTriggerSpring, TRUE)\n          ),\n      },\n    },\n  ]);\n\n  private handleContainerLayout = (e: LayoutChangeEvent) =>\n    this.containerWidth.setValue(e.nativeEvent.layout.width);\n\n  private handleDrawerLayout = (e: LayoutChangeEvent) => {\n    this.drawerWidth.setValue(e.nativeEvent.layout.width);\n    this.toggleDrawer(this.props.open);\n\n    // Until layout is available, drawer is hidden with opacity: 0 by default\n    // Show it in the next frame when layout is available\n    // If we don't delay it until the next frame, there's a visible flicker\n    requestAnimationFrame(() =>\n      requestAnimationFrame(() => this.drawerOpacity.setValue(1))\n    );\n  };\n\n  private toggleDrawer = (open: boolean) => {\n    if (this.currentOpenValue !== open) {\n      this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n      // This value will also be set shortly after as changing this.nextIsOpen changes this.isOpen\n      // However, there's a race condition on Android, so we need to set a bit earlier\n      this.currentOpenValue = open;\n    }\n  };\n\n  private toggleStatusBar = (hidden: boolean) => {\n    const { hideStatusBar, statusBarAnimation } = this.props;\n\n    if (hideStatusBar && this.isStatusBarHidden !== hidden) {\n      this.isStatusBarHidden = hidden;\n      StatusBar.setHidden(hidden, statusBarAnimation);\n    }\n  };\n\n  render() {\n    const {\n      open,\n      gestureEnabled,\n      swipeEnabled,\n      drawerPosition,\n      drawerType,\n      swipeEdgeWidth,\n      sceneContainerStyle,\n      drawerStyle,\n      overlayStyle,\n      renderDrawerContent,\n      renderSceneContent,\n      gestureHandlerProps,\n    } = this.props;\n\n    const isOpen = drawerType === 'permanent' ? true : open;\n    const isRight = drawerPosition === 'right';\n\n    const contentTranslateX =\n      drawerType === 'front' || drawerType === 'permanent'\n        ? ANIMATED_ZERO\n        : this.translateX;\n\n    const drawerTranslateX =\n      drawerType === 'permanent'\n        ? ANIMATED_ZERO\n        : drawerType === 'back'\n        ? I18nManager.isRTL\n          ? multiply(\n              sub(this.containerWidth, this.drawerWidth),\n              isRight ? 1 : -1\n            )\n          : ANIMATED_ZERO\n        : this.translateX;\n\n    const offset =\n      drawerType === 'back'\n        ? 0\n        : I18nManager.isRTL\n        ? '100%'\n        : multiply(this.drawerWidth, -1);\n\n    // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n    // https://github.com/kmagiera/react-native-gesture-handler/issues/569\n    const hitSlop = isRight\n      ? // Extend hitSlop to the side of the screen when drawer is closed\n        // This lets the user drag the drawer from the side of the screen\n        { right: 0, width: isOpen ? undefined : swipeEdgeWidth }\n      : { left: 0, width: isOpen ? undefined : swipeEdgeWidth };\n\n    const progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n\n    return (\n      <PanGestureHandler\n        activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n        failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n        onGestureEvent={this.handleGestureEvent}\n        onHandlerStateChange={this.handleGestureStateChange}\n        hitSlop={hitSlop}\n        enabled={drawerType !== 'permanent' && gestureEnabled && swipeEnabled}\n        {...gestureHandlerProps}\n      >\n        <Animated.View\n          onLayout={this.handleContainerLayout}\n          style={[\n            styles.main,\n            {\n              flexDirection:\n                drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row',\n            },\n          ]}\n        >\n          <Animated.View\n            style={[\n              styles.content,\n              { transform: [{ translateX: contentTranslateX }] },\n              sceneContainerStyle as any,\n            ]}\n          >\n            <View\n              accessibilityElementsHidden={isOpen && drawerType !== 'permanent'}\n              importantForAccessibility={\n                isOpen && drawerType !== 'permanent'\n                  ? 'no-hide-descendants'\n                  : 'auto'\n              }\n              style={styles.content}\n            >\n              {renderSceneContent({ progress })}\n            </View>\n            {\n              // Disable overlay if sidebar is permanent\n              drawerType === 'permanent' ? null : Platform.OS === 'web' ||\n                Platform.OS === 'windows' ||\n                Platform.OS === 'macos' ? (\n                <TouchableWithoutFeedback\n                  onPress={\n                    gestureEnabled ? () => this.toggleDrawer(false) : undefined\n                  }\n                >\n                  <Overlay progress={progress} style={overlayStyle as any} />\n                </TouchableWithoutFeedback>\n              ) : (\n                <TapGestureHandler\n                  enabled={gestureEnabled}\n                  onHandlerStateChange={this.handleTapStateChange}\n                >\n                  <Overlay progress={progress} style={overlayStyle as any} />\n                </TapGestureHandler>\n              )\n            }\n          </Animated.View>\n          <Animated.Code\n            // This is needed to make sure that container width updates with `setValue`\n            // Without this, it won't update when not used in styles\n            exec={this.containerWidth}\n          />\n          {drawerType === 'permanent' ? null : (\n            <Animated.Code\n              exec={block([\n                onChange(this.manuallyTriggerSpring, [\n                  cond(eq(this.manuallyTriggerSpring, TRUE), [\n                    set(this.nextIsOpen, FALSE),\n                    call([], () => (this.currentOpenValue = false)),\n                  ]),\n                ]),\n              ])}\n            />\n          )}\n          <Animated.View\n            accessibilityViewIsModal={isOpen && drawerType !== 'permanent'}\n            removeClippedSubviews={Platform.OS !== 'ios'}\n            onLayout={this.handleDrawerLayout}\n            style={[\n              styles.container,\n              {\n                transform: [{ translateX: drawerTranslateX }],\n                opacity: this.drawerOpacity,\n              },\n              drawerType === 'permanent'\n                ? // Without this, the `left`/`right` values don't get reset\n                  isRight\n                  ? { right: 0 }\n                  : { left: 0 }\n                : [\n                    styles.nonPermanent,\n                    isRight ? { right: offset } : { left: offset },\n                    { zIndex: drawerType === 'back' ? -1 : 0 },\n                  ],\n              drawerStyle as any,\n            ]}\n          >\n            {renderDrawerContent({ progress })}\n          </Animated.View>\n        </Animated.View>\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%',\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: DEFAULT_DRAWER_WIDTH,\n  },\n  content: {\n    flex: 1,\n  },\n  main: {\n    flex: 1,\n    ...Platform.select({\n      // FIXME: We need to hide `overflowX` on Web so the translated content doesn't show offscreen.\n      // But adding `overflowX: 'hidden'` prevents content from collapsing the URL bar.\n      web: null,\n      default: { overflow: 'hidden' },\n    }),\n  },\n});\n"]}