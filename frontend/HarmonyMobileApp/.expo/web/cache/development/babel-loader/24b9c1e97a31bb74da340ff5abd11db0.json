{"ast":null,"code":"import Platform from \"react-native-web/dist/exports/Platform\";\nimport { makeRemote, makeShareable, isConfigured } from \"./core\";\nimport { interpolate } from \"./interpolation\";\nimport { Extrapolate } from \"../reanimated1/derived\";\nvar NUMBER = '[-+]?\\\\d*\\\\.?\\\\d+';\nvar PERCENTAGE = NUMBER + '%';\n\nfunction call() {\n  'worklet';\n\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return '\\\\(\\\\s*(' + args.join(')\\\\s*,\\\\s*(') + ')\\\\s*\\\\)';\n}\n\nvar jsCachedMatchers = {};\nvar uiCachedMatchers = !isConfigured() ? null : makeRemote({});\n\nfunction getMatchers() {\n  'worklet';\n\n  var cachedMatchers = _WORKLET ? uiCachedMatchers : jsCachedMatchers;\n\n  if (cachedMatchers.rgb === undefined) {\n    cachedMatchers.rgb = new RegExp('rgb' + call(NUMBER, NUMBER, NUMBER));\n    cachedMatchers.rgba = new RegExp('rgba' + call(NUMBER, NUMBER, NUMBER, NUMBER));\n    cachedMatchers.hsl = new RegExp('hsl' + call(NUMBER, PERCENTAGE, PERCENTAGE));\n    cachedMatchers.hsla = new RegExp('hsla' + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER));\n    cachedMatchers.hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;\n    cachedMatchers.hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;\n    cachedMatchers.hex6 = /^#([0-9a-fA-F]{6})$/;\n    cachedMatchers.hex8 = /^#([0-9a-fA-F]{8})$/;\n  }\n\n  return cachedMatchers;\n}\n\ngetMatchers();\n\nfunction hue2rgb(p, q, t) {\n  'worklet';\n\n  if (t < 0) {\n    t += 1;\n  }\n\n  if (t > 1) {\n    t -= 1;\n  }\n\n  if (t < 1 / 6) {\n    return p + (q - p) * 6 * t;\n  }\n\n  if (t < 1 / 2) {\n    return q;\n  }\n\n  if (t < 2 / 3) {\n    return p + (q - p) * (2 / 3 - t) * 6;\n  }\n\n  return p;\n}\n\nfunction hslToRgb(h, s, l) {\n  'worklet';\n\n  var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n  var p = 2 * l - q;\n  var r = hue2rgb(p, q, h + 1 / 3);\n  var g = hue2rgb(p, q, h);\n  var b = hue2rgb(p, q, h - 1 / 3);\n  return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;\n}\n\nfunction parse255(str) {\n  'worklet';\n\n  var int = Number.parseInt(str, 10);\n\n  if (int < 0) {\n    return 0;\n  }\n\n  if (int > 255) {\n    return 255;\n  }\n\n  return int;\n}\n\nfunction parse360(str) {\n  'worklet';\n\n  var int = Number.parseFloat(str);\n  return (int % 360 + 360) % 360 / 360;\n}\n\nfunction parse1(str) {\n  'worklet';\n\n  var num = Number.parseFloat(str);\n\n  if (num < 0) {\n    return 0;\n  }\n\n  if (num > 1) {\n    return 255;\n  }\n\n  return Math.round(num * 255);\n}\n\nfunction parsePercentage(str) {\n  'worklet';\n\n  var int = Number.parseFloat(str);\n\n  if (int < 0) {\n    return 0;\n  }\n\n  if (int > 100) {\n    return 1;\n  }\n\n  return int / 100;\n}\n\nvar names = !isConfigured() ? null : makeShareable({\n  transparent: 0x00000000,\n  aliceblue: 0xf0f8ffff,\n  antiquewhite: 0xfaebd7ff,\n  aqua: 0x00ffffff,\n  aquamarine: 0x7fffd4ff,\n  azure: 0xf0ffffff,\n  beige: 0xf5f5dcff,\n  bisque: 0xffe4c4ff,\n  black: 0x000000ff,\n  blanchedalmond: 0xffebcdff,\n  blue: 0x0000ffff,\n  blueviolet: 0x8a2be2ff,\n  brown: 0xa52a2aff,\n  burlywood: 0xdeb887ff,\n  burntsienna: 0xea7e5dff,\n  cadetblue: 0x5f9ea0ff,\n  chartreuse: 0x7fff00ff,\n  chocolate: 0xd2691eff,\n  coral: 0xff7f50ff,\n  cornflowerblue: 0x6495edff,\n  cornsilk: 0xfff8dcff,\n  crimson: 0xdc143cff,\n  cyan: 0x00ffffff,\n  darkblue: 0x00008bff,\n  darkcyan: 0x008b8bff,\n  darkgoldenrod: 0xb8860bff,\n  darkgray: 0xa9a9a9ff,\n  darkgreen: 0x006400ff,\n  darkgrey: 0xa9a9a9ff,\n  darkkhaki: 0xbdb76bff,\n  darkmagenta: 0x8b008bff,\n  darkolivegreen: 0x556b2fff,\n  darkorange: 0xff8c00ff,\n  darkorchid: 0x9932ccff,\n  darkred: 0x8b0000ff,\n  darksalmon: 0xe9967aff,\n  darkseagreen: 0x8fbc8fff,\n  darkslateblue: 0x483d8bff,\n  darkslategray: 0x2f4f4fff,\n  darkslategrey: 0x2f4f4fff,\n  darkturquoise: 0x00ced1ff,\n  darkviolet: 0x9400d3ff,\n  deeppink: 0xff1493ff,\n  deepskyblue: 0x00bfffff,\n  dimgray: 0x696969ff,\n  dimgrey: 0x696969ff,\n  dodgerblue: 0x1e90ffff,\n  firebrick: 0xb22222ff,\n  floralwhite: 0xfffaf0ff,\n  forestgreen: 0x228b22ff,\n  fuchsia: 0xff00ffff,\n  gainsboro: 0xdcdcdcff,\n  ghostwhite: 0xf8f8ffff,\n  gold: 0xffd700ff,\n  goldenrod: 0xdaa520ff,\n  gray: 0x808080ff,\n  green: 0x008000ff,\n  greenyellow: 0xadff2fff,\n  grey: 0x808080ff,\n  honeydew: 0xf0fff0ff,\n  hotpink: 0xff69b4ff,\n  indianred: 0xcd5c5cff,\n  indigo: 0x4b0082ff,\n  ivory: 0xfffff0ff,\n  khaki: 0xf0e68cff,\n  lavender: 0xe6e6faff,\n  lavenderblush: 0xfff0f5ff,\n  lawngreen: 0x7cfc00ff,\n  lemonchiffon: 0xfffacdff,\n  lightblue: 0xadd8e6ff,\n  lightcoral: 0xf08080ff,\n  lightcyan: 0xe0ffffff,\n  lightgoldenrodyellow: 0xfafad2ff,\n  lightgray: 0xd3d3d3ff,\n  lightgreen: 0x90ee90ff,\n  lightgrey: 0xd3d3d3ff,\n  lightpink: 0xffb6c1ff,\n  lightsalmon: 0xffa07aff,\n  lightseagreen: 0x20b2aaff,\n  lightskyblue: 0x87cefaff,\n  lightslategray: 0x778899ff,\n  lightslategrey: 0x778899ff,\n  lightsteelblue: 0xb0c4deff,\n  lightyellow: 0xffffe0ff,\n  lime: 0x00ff00ff,\n  limegreen: 0x32cd32ff,\n  linen: 0xfaf0e6ff,\n  magenta: 0xff00ffff,\n  maroon: 0x800000ff,\n  mediumaquamarine: 0x66cdaaff,\n  mediumblue: 0x0000cdff,\n  mediumorchid: 0xba55d3ff,\n  mediumpurple: 0x9370dbff,\n  mediumseagreen: 0x3cb371ff,\n  mediumslateblue: 0x7b68eeff,\n  mediumspringgreen: 0x00fa9aff,\n  mediumturquoise: 0x48d1ccff,\n  mediumvioletred: 0xc71585ff,\n  midnightblue: 0x191970ff,\n  mintcream: 0xf5fffaff,\n  mistyrose: 0xffe4e1ff,\n  moccasin: 0xffe4b5ff,\n  navajowhite: 0xffdeadff,\n  navy: 0x000080ff,\n  oldlace: 0xfdf5e6ff,\n  olive: 0x808000ff,\n  olivedrab: 0x6b8e23ff,\n  orange: 0xffa500ff,\n  orangered: 0xff4500ff,\n  orchid: 0xda70d6ff,\n  palegoldenrod: 0xeee8aaff,\n  palegreen: 0x98fb98ff,\n  paleturquoise: 0xafeeeeff,\n  palevioletred: 0xdb7093ff,\n  papayawhip: 0xffefd5ff,\n  peachpuff: 0xffdab9ff,\n  peru: 0xcd853fff,\n  pink: 0xffc0cbff,\n  plum: 0xdda0ddff,\n  powderblue: 0xb0e0e6ff,\n  purple: 0x800080ff,\n  rebeccapurple: 0x663399ff,\n  red: 0xff0000ff,\n  rosybrown: 0xbc8f8fff,\n  royalblue: 0x4169e1ff,\n  saddlebrown: 0x8b4513ff,\n  salmon: 0xfa8072ff,\n  sandybrown: 0xf4a460ff,\n  seagreen: 0x2e8b57ff,\n  seashell: 0xfff5eeff,\n  sienna: 0xa0522dff,\n  silver: 0xc0c0c0ff,\n  skyblue: 0x87ceebff,\n  slateblue: 0x6a5acdff,\n  slategray: 0x708090ff,\n  slategrey: 0x708090ff,\n  snow: 0xfffafaff,\n  springgreen: 0x00ff7fff,\n  steelblue: 0x4682b4ff,\n  tan: 0xd2b48cff,\n  teal: 0x008080ff,\n  thistle: 0xd8bfd8ff,\n  tomato: 0xff6347ff,\n  turquoise: 0x40e0d0ff,\n  violet: 0xee82eeff,\n  wheat: 0xf5deb3ff,\n  white: 0xffffffff,\n  whitesmoke: 0xf5f5f5ff,\n  yellow: 0xffff00ff,\n  yellowgreen: 0x9acd32ff\n});\n\nfunction normalizeColor(color) {\n  'worklet';\n\n  if (typeof color === 'number') {\n    if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {\n      return color;\n    }\n\n    return null;\n  }\n\n  if (typeof color !== 'string') {\n    return null;\n  }\n\n  var matchers = getMatchers();\n  var match;\n\n  if (match = matchers.hex6.exec(color)) {\n    return Number.parseInt(match[1] + 'ff', 16) >>> 0;\n  }\n\n  if (names[color] !== undefined) {\n    return names[color];\n  }\n\n  if (match = matchers.rgb.exec(color)) {\n    return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | 0x000000ff) >>> 0;\n  }\n\n  if (match = matchers.rgba.exec(color)) {\n    return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | parse1(match[4])) >>> 0;\n  }\n\n  if (match = matchers.hex3.exec(color)) {\n    return Number.parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + 'ff', 16) >>> 0;\n  }\n\n  if (match = matchers.hex8.exec(color)) {\n    return Number.parseInt(match[1], 16) >>> 0;\n  }\n\n  if (match = matchers.hex4.exec(color)) {\n    return Number.parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + match[4] + match[4], 16) >>> 0;\n  }\n\n  if (match = matchers.hsl.exec(color)) {\n    return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | 0x000000ff) >>> 0;\n  }\n\n  if (match = matchers.hsla.exec(color)) {\n    return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | parse1(match[4])) >>> 0;\n  }\n\n  return null;\n}\n\nexport var opacity = function opacity(c) {\n  'worklet';\n\n  return (c >> 24 & 255) / 255;\n};\nexport var red = function red(c) {\n  'worklet';\n\n  return c >> 16 & 255;\n};\nexport var green = function green(c) {\n  'worklet';\n\n  return c >> 8 & 255;\n};\nexport var blue = function blue(c) {\n  'worklet';\n\n  return c & 255;\n};\nexport var rgbaColor = function rgbaColor(r, g, b) {\n  'worklet';\n\n  var alpha = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n\n  if (Platform.OS === 'web' || !_WORKLET) {\n    return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + alpha + \")\";\n  }\n\n  var a = Math.round(alpha * 255);\n  var c = a * (1 << 24) + Math.round(r) * (1 << 16) + Math.round(g) * (1 << 8) + Math.round(b);\n\n  if (Platform.OS === 'android') {\n    return c < 1 << 31 >>> 0 ? c : c - Math.pow(2, 32);\n  }\n\n  return c;\n};\n\nfunction RGBtoHSV(r, g, b) {\n  'worklet';\n\n  if (arguments.length === 1) {\n    g = r.g;\n    b = r.b;\n    r = r.r;\n  }\n\n  var max = Math.max(r, g, b);\n  var min = Math.min(r, g, b);\n  var d = max - min;\n  var s = max === 0 ? 0 : d / max;\n  var v = max / 255;\n  var h;\n\n  switch (max) {\n    default:\n    case min:\n      h = 0;\n      break;\n\n    case r:\n      h = g - b + d * (g < b ? 6 : 0);\n      h /= 6 * d;\n      break;\n\n    case g:\n      h = b - r + d * 2;\n      h /= 6 * d;\n      break;\n\n    case b:\n      h = r - g + d * 4;\n      h /= 6 * d;\n      break;\n  }\n\n  return {\n    h: h,\n    s: s,\n    v: v\n  };\n}\n\nfunction HSVtoRGB(h, s, v) {\n  'worklet';\n\n  var r, g, b, i, f, p, q, t;\n\n  if (arguments.length === 1) {\n    s = h.s;\n    v = h.v;\n    h = h.h;\n  }\n\n  i = Math.floor(h * 6);\n  f = h * 6 - i;\n  p = v * (1 - s);\n  q = v * (1 - f * s);\n  t = v * (1 - (1 - f) * s);\n\n  switch (i % 6) {\n    case 0:\n      r = v, g = t, b = p;\n      break;\n\n    case 1:\n      r = q, g = v, b = p;\n      break;\n\n    case 2:\n      r = p, g = v, b = t;\n      break;\n\n    case 3:\n      r = p, g = q, b = v;\n      break;\n\n    case 4:\n      r = t, g = p, b = v;\n      break;\n\n    case 5:\n      r = v, g = p, b = q;\n      break;\n  }\n\n  return {\n    r: Math.round(r * 255),\n    g: Math.round(g * 255),\n    b: Math.round(b * 255)\n  };\n}\n\nexport var hsvToColor = function hsvToColor(h, s, v) {\n  'worklet';\n\n  var _HSVtoRGB = HSVtoRGB(h, s, v),\n      r = _HSVtoRGB.r,\n      g = _HSVtoRGB.g,\n      b = _HSVtoRGB.b;\n\n  return rgbaColor(r, g, b);\n};\nexport function processColorInitially(color) {\n  'worklet';\n\n  if (color === null || color === undefined || typeof color === 'number') {\n    return color;\n  }\n\n  var normalizedColor = normalizeColor(color);\n\n  if (normalizedColor === null || normalizedColor === undefined) {\n    return undefined;\n  }\n\n  if (typeof normalizedColor !== 'number') {\n    return null;\n  }\n\n  normalizedColor = (normalizedColor << 24 | normalizedColor >>> 8) >>> 0;\n  return normalizedColor;\n}\nexport function isColor(value) {\n  'worklet';\n\n  if (typeof value !== 'string') {\n    return false;\n  }\n\n  return processColorInitially(value) != null;\n}\nexport function processColor(color) {\n  'worklet';\n\n  var normalizedColor = processColorInitially(color);\n\n  if (normalizedColor === null || normalizedColor === undefined) {\n    return undefined;\n  }\n\n  if (typeof normalizedColor !== 'number') {\n    return null;\n  }\n\n  if (Platform.OS === 'android') {\n    normalizedColor = normalizedColor | 0x0;\n  }\n\n  return normalizedColor;\n}\nexport function convertToHSVA(color) {\n  'worklet';\n\n  var processedColor = processColorInitially(color);\n  var a = (processedColor >>> 24) / 255;\n  var r = processedColor << 8 >>> 24;\n  var g = processedColor << 16 >>> 24;\n  var b = processedColor << 24 >>> 24;\n\n  var _RGBtoHSV = RGBtoHSV(r, g, b),\n      h = _RGBtoHSV.h,\n      s = _RGBtoHSV.s,\n      v = _RGBtoHSV.v;\n\n  return [h, s, v, a];\n}\nexport function toRGBA(HSVA) {\n  'worklet';\n\n  var _HSVtoRGB2 = HSVtoRGB(HSVA[0], HSVA[1], HSVA[2]),\n      r = _HSVtoRGB2.r,\n      g = _HSVtoRGB2.g,\n      b = _HSVtoRGB2.b;\n\n  return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + HSVA[3] + \")\";\n}\n\nvar interpolateColorsHSV = function interpolateColorsHSV(value, inputRange, colors) {\n  'worklet';\n\n  var colorsAsHSV = colors.map(function (c) {\n    return RGBtoHSV(c);\n  });\n  var h = interpolate(value, inputRange, colorsAsHSV.map(function (c) {\n    return c.h;\n  }), Extrapolate.CLAMP);\n  var s = interpolate(value, inputRange, colorsAsHSV.map(function (c) {\n    return c.s;\n  }), Extrapolate.CLAMP);\n  var v = interpolate(value, inputRange, colorsAsHSV.map(function (c) {\n    return c.v;\n  }), Extrapolate.CLAMP);\n  return hsvToColor(h, s, v);\n};\n\nvar interpolateColorsRGB = function interpolateColorsRGB(value, inputRange, colors) {\n  'worklet';\n\n  var r = Math.round(interpolate(value, inputRange, colors.map(function (c) {\n    return red(c);\n  }), Extrapolate.CLAMP));\n  var g = Math.round(interpolate(value, inputRange, colors.map(function (c) {\n    return green(c);\n  }), Extrapolate.CLAMP));\n  var b = Math.round(interpolate(value, inputRange, colors.map(function (c) {\n    return blue(c);\n  }), Extrapolate.CLAMP));\n  var a = interpolate(value, inputRange, colors.map(function (c) {\n    return opacity(c);\n  }), Extrapolate.CLAMP);\n  return rgbaColor(r, g, b, a);\n};\n\nexport var interpolateColor = function interpolateColor(value, inputRange, outputRange) {\n  'worklet';\n\n  var colorSpace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'RGB';\n  var processedOutputRange = outputRange.map(function (c) {\n    return processColor(c);\n  });\n\n  if (colorSpace === 'HSV') {\n    return interpolateColorsHSV(value, inputRange, processedOutputRange);\n  }\n\n  if (colorSpace === 'RGB') {\n    return interpolateColorsRGB(value, inputRange, processedOutputRange);\n  }\n\n  throw new Error(\"invalid color space provided: \" + colorSpace + \". Supported values are: ['RGB', 'HSV']\");\n};","map":{"version":3,"sources":["C:/Users/perum/Documents/Harmony/frontend/HarmonyMobileApp/node_modules/react-native-reanimated/lib/reanimated2/Colors.js"],"names":["makeRemote","makeShareable","isConfigured","interpolate","Extrapolate","NUMBER","PERCENTAGE","call","args","join","jsCachedMatchers","uiCachedMatchers","getMatchers","cachedMatchers","_WORKLET","rgb","undefined","RegExp","rgba","hsl","hsla","hex3","hex4","hex6","hex8","hue2rgb","p","q","t","hslToRgb","h","s","l","r","g","b","Math","round","parse255","str","int","Number","parseInt","parse360","parseFloat","parse1","num","parsePercentage","names","transparent","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","burntsienna","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","normalizeColor","color","matchers","match","exec","opacity","c","rgbaColor","alpha","Platform","OS","a","pow","RGBtoHSV","arguments","length","max","min","d","v","HSVtoRGB","i","f","floor","hsvToColor","processColorInitially","normalizedColor","isColor","value","processColor","convertToHSVA","processedColor","toRGBA","HSVA","interpolateColorsHSV","inputRange","colors","colorsAsHSV","map","CLAMP","interpolateColorsRGB","interpolateColor","outputRange","colorSpace","processedOutputRange","Error"],"mappings":"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","sourcesContent":["/* global _WORKLET */\r\n/**\r\n * Copied from:\r\n * react-native/Libraries/StyleSheet/normalizeColor.js\r\n * react-native/Libraries/StyleSheet/processColor.js\r\n * https://github.com/wcandillon/react-native-redash/blob/master/src/Colors.ts\r\n */\r\n/* eslint no-bitwise: 0 */\r\nimport { Platform } from 'react-native';\r\nimport { makeRemote, makeShareable, isConfigured } from './core';\r\nimport { interpolate } from './interpolation';\r\n// @ts-ignore JS file\r\nimport { Extrapolate } from '../reanimated1/derived';\r\n// var INTEGER = '[-+]?\\\\d+';\r\nconst NUMBER = '[-+]?\\\\d*\\\\.?\\\\d+';\r\nconst PERCENTAGE = NUMBER + '%';\r\nfunction call(...args) {\r\n    'worklet';\r\n    return '\\\\(\\\\s*(' + args.join(')\\\\s*,\\\\s*(') + ')\\\\s*\\\\)';\r\n}\r\n// matchers use RegExp objects which needs to be created separately on JS and on\r\n// the UI thread. We keep separate cache of Regexes for UI and JS using the below\r\n// objects, then pick the right cache in getMatchers() method.\r\nconst jsCachedMatchers = {};\r\nconst uiCachedMatchers = !isConfigured() ? null : makeRemote({});\r\nfunction getMatchers() {\r\n    'worklet';\r\n    const cachedMatchers = _WORKLET\r\n        ? uiCachedMatchers\r\n        : jsCachedMatchers;\r\n    if (cachedMatchers.rgb === undefined) {\r\n        cachedMatchers.rgb = new RegExp('rgb' + call(NUMBER, NUMBER, NUMBER));\r\n        cachedMatchers.rgba = new RegExp('rgba' + call(NUMBER, NUMBER, NUMBER, NUMBER));\r\n        cachedMatchers.hsl = new RegExp('hsl' + call(NUMBER, PERCENTAGE, PERCENTAGE));\r\n        cachedMatchers.hsla = new RegExp('hsla' + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER));\r\n        cachedMatchers.hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;\r\n        cachedMatchers.hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;\r\n        cachedMatchers.hex6 = /^#([0-9a-fA-F]{6})$/;\r\n        cachedMatchers.hex8 = /^#([0-9a-fA-F]{8})$/;\r\n    }\r\n    return cachedMatchers;\r\n}\r\n// cachedMatchers is lazy loaded and it is frozen when worklet is being created,\r\n// it is possible to call getMatchers() when the object is frozen, then cachedMatchers\r\n// has no assigned regexes\r\ngetMatchers();\r\nfunction hue2rgb(p, q, t) {\r\n    'worklet';\r\n    if (t < 0) {\r\n        t += 1;\r\n    }\r\n    if (t > 1) {\r\n        t -= 1;\r\n    }\r\n    if (t < 1 / 6) {\r\n        return p + (q - p) * 6 * t;\r\n    }\r\n    if (t < 1 / 2) {\r\n        return q;\r\n    }\r\n    if (t < 2 / 3) {\r\n        return p + (q - p) * (2 / 3 - t) * 6;\r\n    }\r\n    return p;\r\n}\r\nfunction hslToRgb(h, s, l) {\r\n    'worklet';\r\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n    const p = 2 * l - q;\r\n    const r = hue2rgb(p, q, h + 1 / 3);\r\n    const g = hue2rgb(p, q, h);\r\n    const b = hue2rgb(p, q, h - 1 / 3);\r\n    return ((Math.round(r * 255) << 24) |\r\n        (Math.round(g * 255) << 16) |\r\n        (Math.round(b * 255) << 8));\r\n}\r\nfunction parse255(str) {\r\n    'worklet';\r\n    const int = Number.parseInt(str, 10);\r\n    if (int < 0) {\r\n        return 0;\r\n    }\r\n    if (int > 255) {\r\n        return 255;\r\n    }\r\n    return int;\r\n}\r\nfunction parse360(str) {\r\n    'worklet';\r\n    const int = Number.parseFloat(str);\r\n    return (((int % 360) + 360) % 360) / 360;\r\n}\r\nfunction parse1(str) {\r\n    'worklet';\r\n    const num = Number.parseFloat(str);\r\n    if (num < 0) {\r\n        return 0;\r\n    }\r\n    if (num > 1) {\r\n        return 255;\r\n    }\r\n    return Math.round(num * 255);\r\n}\r\nfunction parsePercentage(str) {\r\n    'worklet';\r\n    // parseFloat conveniently ignores the final %\r\n    const int = Number.parseFloat(str);\r\n    if (int < 0) {\r\n        return 0;\r\n    }\r\n    if (int > 100) {\r\n        return 1;\r\n    }\r\n    return int / 100;\r\n}\r\nconst names = !isConfigured()\r\n    ? null\r\n    : makeShareable({\r\n        transparent: 0x00000000,\r\n        // http://www.w3.org/TR/css3-color/#svg-color\r\n        aliceblue: 0xf0f8ffff,\r\n        antiquewhite: 0xfaebd7ff,\r\n        aqua: 0x00ffffff,\r\n        aquamarine: 0x7fffd4ff,\r\n        azure: 0xf0ffffff,\r\n        beige: 0xf5f5dcff,\r\n        bisque: 0xffe4c4ff,\r\n        black: 0x000000ff,\r\n        blanchedalmond: 0xffebcdff,\r\n        blue: 0x0000ffff,\r\n        blueviolet: 0x8a2be2ff,\r\n        brown: 0xa52a2aff,\r\n        burlywood: 0xdeb887ff,\r\n        burntsienna: 0xea7e5dff,\r\n        cadetblue: 0x5f9ea0ff,\r\n        chartreuse: 0x7fff00ff,\r\n        chocolate: 0xd2691eff,\r\n        coral: 0xff7f50ff,\r\n        cornflowerblue: 0x6495edff,\r\n        cornsilk: 0xfff8dcff,\r\n        crimson: 0xdc143cff,\r\n        cyan: 0x00ffffff,\r\n        darkblue: 0x00008bff,\r\n        darkcyan: 0x008b8bff,\r\n        darkgoldenrod: 0xb8860bff,\r\n        darkgray: 0xa9a9a9ff,\r\n        darkgreen: 0x006400ff,\r\n        darkgrey: 0xa9a9a9ff,\r\n        darkkhaki: 0xbdb76bff,\r\n        darkmagenta: 0x8b008bff,\r\n        darkolivegreen: 0x556b2fff,\r\n        darkorange: 0xff8c00ff,\r\n        darkorchid: 0x9932ccff,\r\n        darkred: 0x8b0000ff,\r\n        darksalmon: 0xe9967aff,\r\n        darkseagreen: 0x8fbc8fff,\r\n        darkslateblue: 0x483d8bff,\r\n        darkslategray: 0x2f4f4fff,\r\n        darkslategrey: 0x2f4f4fff,\r\n        darkturquoise: 0x00ced1ff,\r\n        darkviolet: 0x9400d3ff,\r\n        deeppink: 0xff1493ff,\r\n        deepskyblue: 0x00bfffff,\r\n        dimgray: 0x696969ff,\r\n        dimgrey: 0x696969ff,\r\n        dodgerblue: 0x1e90ffff,\r\n        firebrick: 0xb22222ff,\r\n        floralwhite: 0xfffaf0ff,\r\n        forestgreen: 0x228b22ff,\r\n        fuchsia: 0xff00ffff,\r\n        gainsboro: 0xdcdcdcff,\r\n        ghostwhite: 0xf8f8ffff,\r\n        gold: 0xffd700ff,\r\n        goldenrod: 0xdaa520ff,\r\n        gray: 0x808080ff,\r\n        green: 0x008000ff,\r\n        greenyellow: 0xadff2fff,\r\n        grey: 0x808080ff,\r\n        honeydew: 0xf0fff0ff,\r\n        hotpink: 0xff69b4ff,\r\n        indianred: 0xcd5c5cff,\r\n        indigo: 0x4b0082ff,\r\n        ivory: 0xfffff0ff,\r\n        khaki: 0xf0e68cff,\r\n        lavender: 0xe6e6faff,\r\n        lavenderblush: 0xfff0f5ff,\r\n        lawngreen: 0x7cfc00ff,\r\n        lemonchiffon: 0xfffacdff,\r\n        lightblue: 0xadd8e6ff,\r\n        lightcoral: 0xf08080ff,\r\n        lightcyan: 0xe0ffffff,\r\n        lightgoldenrodyellow: 0xfafad2ff,\r\n        lightgray: 0xd3d3d3ff,\r\n        lightgreen: 0x90ee90ff,\r\n        lightgrey: 0xd3d3d3ff,\r\n        lightpink: 0xffb6c1ff,\r\n        lightsalmon: 0xffa07aff,\r\n        lightseagreen: 0x20b2aaff,\r\n        lightskyblue: 0x87cefaff,\r\n        lightslategray: 0x778899ff,\r\n        lightslategrey: 0x778899ff,\r\n        lightsteelblue: 0xb0c4deff,\r\n        lightyellow: 0xffffe0ff,\r\n        lime: 0x00ff00ff,\r\n        limegreen: 0x32cd32ff,\r\n        linen: 0xfaf0e6ff,\r\n        magenta: 0xff00ffff,\r\n        maroon: 0x800000ff,\r\n        mediumaquamarine: 0x66cdaaff,\r\n        mediumblue: 0x0000cdff,\r\n        mediumorchid: 0xba55d3ff,\r\n        mediumpurple: 0x9370dbff,\r\n        mediumseagreen: 0x3cb371ff,\r\n        mediumslateblue: 0x7b68eeff,\r\n        mediumspringgreen: 0x00fa9aff,\r\n        mediumturquoise: 0x48d1ccff,\r\n        mediumvioletred: 0xc71585ff,\r\n        midnightblue: 0x191970ff,\r\n        mintcream: 0xf5fffaff,\r\n        mistyrose: 0xffe4e1ff,\r\n        moccasin: 0xffe4b5ff,\r\n        navajowhite: 0xffdeadff,\r\n        navy: 0x000080ff,\r\n        oldlace: 0xfdf5e6ff,\r\n        olive: 0x808000ff,\r\n        olivedrab: 0x6b8e23ff,\r\n        orange: 0xffa500ff,\r\n        orangered: 0xff4500ff,\r\n        orchid: 0xda70d6ff,\r\n        palegoldenrod: 0xeee8aaff,\r\n        palegreen: 0x98fb98ff,\r\n        paleturquoise: 0xafeeeeff,\r\n        palevioletred: 0xdb7093ff,\r\n        papayawhip: 0xffefd5ff,\r\n        peachpuff: 0xffdab9ff,\r\n        peru: 0xcd853fff,\r\n        pink: 0xffc0cbff,\r\n        plum: 0xdda0ddff,\r\n        powderblue: 0xb0e0e6ff,\r\n        purple: 0x800080ff,\r\n        rebeccapurple: 0x663399ff,\r\n        red: 0xff0000ff,\r\n        rosybrown: 0xbc8f8fff,\r\n        royalblue: 0x4169e1ff,\r\n        saddlebrown: 0x8b4513ff,\r\n        salmon: 0xfa8072ff,\r\n        sandybrown: 0xf4a460ff,\r\n        seagreen: 0x2e8b57ff,\r\n        seashell: 0xfff5eeff,\r\n        sienna: 0xa0522dff,\r\n        silver: 0xc0c0c0ff,\r\n        skyblue: 0x87ceebff,\r\n        slateblue: 0x6a5acdff,\r\n        slategray: 0x708090ff,\r\n        slategrey: 0x708090ff,\r\n        snow: 0xfffafaff,\r\n        springgreen: 0x00ff7fff,\r\n        steelblue: 0x4682b4ff,\r\n        tan: 0xd2b48cff,\r\n        teal: 0x008080ff,\r\n        thistle: 0xd8bfd8ff,\r\n        tomato: 0xff6347ff,\r\n        turquoise: 0x40e0d0ff,\r\n        violet: 0xee82eeff,\r\n        wheat: 0xf5deb3ff,\r\n        white: 0xffffffff,\r\n        whitesmoke: 0xf5f5f5ff,\r\n        yellow: 0xffff00ff,\r\n        yellowgreen: 0x9acd32ff,\r\n    });\r\nfunction normalizeColor(color) {\r\n    'worklet';\r\n    if (typeof color === 'number') {\r\n        if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {\r\n            return color;\r\n        }\r\n        return null;\r\n    }\r\n    if (typeof color !== 'string') {\r\n        return null;\r\n    }\r\n    const matchers = getMatchers();\r\n    let match;\r\n    // Ordered based on occurrences on Facebook codebase\r\n    if ((match = matchers.hex6.exec(color))) {\r\n        return Number.parseInt(match[1] + 'ff', 16) >>> 0;\r\n    }\r\n    if (names[color] !== undefined) {\r\n        return names[color];\r\n    }\r\n    if ((match = matchers.rgb.exec(color))) {\r\n        return (\r\n        // b\r\n        ((parse255(match[1]) << 24) | // r\r\n            (parse255(match[2]) << 16) | // g\r\n            (parse255(match[3]) << 8) |\r\n            0x000000ff) >>> // a\r\n            0);\r\n    }\r\n    if ((match = matchers.rgba.exec(color))) {\r\n        return (\r\n        // b\r\n        ((parse255(match[1]) << 24) | // r\r\n            (parse255(match[2]) << 16) | // g\r\n            (parse255(match[3]) << 8) |\r\n            parse1(match[4])) >>> // a\r\n            0);\r\n    }\r\n    if ((match = matchers.hex3.exec(color))) {\r\n        return (Number.parseInt(match[1] +\r\n            match[1] + // r\r\n            match[2] +\r\n            match[2] + // g\r\n            match[3] +\r\n            match[3] + // b\r\n            'ff', // a\r\n        16) >>> 0);\r\n    }\r\n    // https://drafts.csswg.org/css-color-4/#hex-notation\r\n    if ((match = matchers.hex8.exec(color))) {\r\n        return Number.parseInt(match[1], 16) >>> 0;\r\n    }\r\n    if ((match = matchers.hex4.exec(color))) {\r\n        return (Number.parseInt(match[1] +\r\n            match[1] + // r\r\n            match[2] +\r\n            match[2] + // g\r\n            match[3] +\r\n            match[3] + // b\r\n            match[4] +\r\n            match[4], // a\r\n        16) >>> 0);\r\n    }\r\n    if ((match = matchers.hsl.exec(color))) {\r\n        return ((hslToRgb(parse360(match[1]), // h\r\n        parsePercentage(match[2]), // s\r\n        parsePercentage(match[3]) // l\r\n        ) |\r\n            0x000000ff) >>> // a\r\n            0);\r\n    }\r\n    if ((match = matchers.hsla.exec(color))) {\r\n        return ((hslToRgb(parse360(match[1]), // h\r\n        parsePercentage(match[2]), // s\r\n        parsePercentage(match[3]) // l\r\n        ) |\r\n            parse1(match[4])) >>> // a\r\n            0);\r\n    }\r\n    return null;\r\n}\r\nexport const opacity = (c) => {\r\n    'worklet';\r\n    return ((c >> 24) & 255) / 255;\r\n};\r\nexport const red = (c) => {\r\n    'worklet';\r\n    return (c >> 16) & 255;\r\n};\r\nexport const green = (c) => {\r\n    'worklet';\r\n    return (c >> 8) & 255;\r\n};\r\nexport const blue = (c) => {\r\n    'worklet';\r\n    return c & 255;\r\n};\r\nexport const rgbaColor = (r, g, b, alpha = 1) => {\r\n    'worklet';\r\n    if (Platform.OS === 'web' || !_WORKLET) {\r\n        return `rgba(${r}, ${g}, ${b}, ${alpha})`;\r\n    }\r\n    const a = Math.round(alpha * 255);\r\n    const c = a * (1 << 24) +\r\n        Math.round(r) * (1 << 16) +\r\n        Math.round(g) * (1 << 8) +\r\n        Math.round(b);\r\n    if (Platform.OS === 'android') {\r\n        // on Android color is represented as signed 32 bit int\r\n        return c < (1 << 31) >>> 0 ? c : c - Math.pow(2, 32);\r\n    }\r\n    return c;\r\n};\r\nfunction RGBtoHSV(r, g, b) {\r\n    'worklet';\r\n    /* eslint-disable */\r\n    if (arguments.length === 1) {\r\n        g = r.g;\r\n        b = r.b;\r\n        r = r.r;\r\n    }\r\n    const max = Math.max(r, g, b);\r\n    const min = Math.min(r, g, b);\r\n    const d = max - min;\r\n    const s = max === 0 ? 0 : d / max;\r\n    const v = max / 255;\r\n    let h;\r\n    switch (max) {\r\n        default:\r\n        /* fallthrough */\r\n        case min:\r\n            h = 0;\r\n            break;\r\n        case r:\r\n            h = g - b + d * (g < b ? 6 : 0);\r\n            h /= 6 * d;\r\n            break;\r\n        case g:\r\n            h = b - r + d * 2;\r\n            h /= 6 * d;\r\n            break;\r\n        case b:\r\n            h = r - g + d * 4;\r\n            h /= 6 * d;\r\n            break;\r\n    }\r\n    return {\r\n        h: h,\r\n        s: s,\r\n        v: v,\r\n    };\r\n    /* eslint-enable */\r\n}\r\nfunction HSVtoRGB(h, s, v) {\r\n    'worklet';\r\n    /* eslint-disable */\r\n    var r, g, b, i, f, p, q, t;\r\n    if (arguments.length === 1) {\r\n        s = h.s;\r\n        v = h.v;\r\n        h = h.h;\r\n    }\r\n    i = Math.floor(h * 6);\r\n    f = h * 6 - i;\r\n    p = v * (1 - s);\r\n    q = v * (1 - f * s);\r\n    t = v * (1 - (1 - f) * s);\r\n    switch (i % 6) {\r\n        case 0:\r\n            (r = v), (g = t), (b = p);\r\n            break;\r\n        case 1:\r\n            (r = q), (g = v), (b = p);\r\n            break;\r\n        case 2:\r\n            (r = p), (g = v), (b = t);\r\n            break;\r\n        case 3:\r\n            (r = p), (g = q), (b = v);\r\n            break;\r\n        case 4:\r\n            (r = t), (g = p), (b = v);\r\n            break;\r\n        case 5:\r\n            (r = v), (g = p), (b = q);\r\n            break;\r\n    }\r\n    return {\r\n        r: Math.round(r * 255),\r\n        g: Math.round(g * 255),\r\n        b: Math.round(b * 255),\r\n    };\r\n    /* eslint-enable */\r\n}\r\nexport const hsvToColor = (h, s, v) => {\r\n    'worklet';\r\n    const { r, g, b } = HSVtoRGB(h, s, v);\r\n    return rgbaColor(r, g, b);\r\n};\r\nexport function processColorInitially(color) {\r\n    'worklet';\r\n    if (color === null || color === undefined || typeof color === 'number') {\r\n        return color;\r\n    }\r\n    let normalizedColor = normalizeColor(color);\r\n    if (normalizedColor === null || normalizedColor === undefined) {\r\n        return undefined;\r\n    }\r\n    if (typeof normalizedColor !== 'number') {\r\n        return null;\r\n    }\r\n    normalizedColor = ((normalizedColor << 24) | (normalizedColor >>> 8)) >>> 0; // argb\r\n    return normalizedColor;\r\n}\r\nexport function isColor(value) {\r\n    'worklet';\r\n    if (typeof value !== 'string') {\r\n        return false;\r\n    }\r\n    return processColorInitially(value) != null;\r\n}\r\nexport function processColor(color) {\r\n    'worklet';\r\n    let normalizedColor = processColorInitially(color);\r\n    if (normalizedColor === null || normalizedColor === undefined) {\r\n        return undefined;\r\n    }\r\n    if (typeof normalizedColor !== 'number') {\r\n        return null;\r\n    }\r\n    if (Platform.OS === 'android') {\r\n        // Android use 32 bit *signed* integer to represent the color\r\n        // We utilize the fact that bitwise operations in JS also operates on\r\n        // signed 32 bit integers, so that we can use those to convert from\r\n        // *unsigned* to *signed* 32bit int that way.\r\n        normalizedColor = normalizedColor | 0x0;\r\n    }\r\n    return normalizedColor;\r\n}\r\nexport function convertToHSVA(color) {\r\n    'worklet';\r\n    const processedColor = processColorInitially(color); // argb;\r\n    const a = (processedColor >>> 24) / 255;\r\n    const r = (processedColor << 8) >>> 24;\r\n    const g = (processedColor << 16) >>> 24;\r\n    const b = (processedColor << 24) >>> 24;\r\n    const { h, s, v } = RGBtoHSV(r, g, b);\r\n    return [h, s, v, a];\r\n}\r\nexport function toRGBA(HSVA) {\r\n    'worklet';\r\n    const { r, g, b } = HSVtoRGB(HSVA[0], HSVA[1], HSVA[2]);\r\n    return `rgba(${r}, ${g}, ${b}, ${HSVA[3]})`;\r\n}\r\nconst interpolateColorsHSV = (value, inputRange, colors) => {\r\n    'worklet';\r\n    const colorsAsHSV = colors.map((c) => RGBtoHSV(c));\r\n    const h = interpolate(value, inputRange, colorsAsHSV.map((c) => c.h), Extrapolate.CLAMP);\r\n    const s = interpolate(value, inputRange, colorsAsHSV.map((c) => c.s), Extrapolate.CLAMP);\r\n    const v = interpolate(value, inputRange, colorsAsHSV.map((c) => c.v), Extrapolate.CLAMP);\r\n    return hsvToColor(h, s, v);\r\n};\r\nconst interpolateColorsRGB = (value, inputRange, colors) => {\r\n    'worklet';\r\n    const r = Math.round(interpolate(value, inputRange, colors.map((c) => red(c)), Extrapolate.CLAMP));\r\n    const g = Math.round(interpolate(value, inputRange, colors.map((c) => green(c)), Extrapolate.CLAMP));\r\n    const b = Math.round(interpolate(value, inputRange, colors.map((c) => blue(c)), Extrapolate.CLAMP));\r\n    const a = interpolate(value, inputRange, colors.map((c) => opacity(c)), Extrapolate.CLAMP);\r\n    return rgbaColor(r, g, b, a);\r\n};\r\nexport const interpolateColor = (value, inputRange, outputRange, colorSpace = 'RGB') => {\r\n    'worklet';\r\n    const processedOutputRange = outputRange.map((c) => processColor(c));\r\n    if (colorSpace === 'HSV') {\r\n        return interpolateColorsHSV(value, inputRange, processedOutputRange);\r\n    }\r\n    if (colorSpace === 'RGB') {\r\n        return interpolateColorsRGB(value, inputRange, processedOutputRange);\r\n    }\r\n    throw new Error(`invalid color space provided: ${colorSpace}. Supported values are: ['RGB', 'HSV']`);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}