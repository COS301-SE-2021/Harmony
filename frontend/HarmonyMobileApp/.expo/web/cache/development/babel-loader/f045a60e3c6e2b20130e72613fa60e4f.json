{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport { processColor } from \"./Colors\";\nimport { makeShareable, isConfigured } from \"./core\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { _updatePropsJS } from \"./js-reanimated\";\nvar colorProps = ['backgroundColor', 'borderBottomColor', 'borderColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor', 'borderStartColor', 'borderEndColor', 'color', 'shadowColor', 'textDecorationColor', 'tintColor', 'textShadowColor', 'overlayColor'];\nvar ColorProperties = !isConfigured() ? [] : makeShareable(colorProps);\nexport var updateProps = function updateProps(viewDescriptor, updates, maybeViewRef, adapters) {\n  'worklet';\n\n  var viewName = viewDescriptor.value.name || 'RCTView';\n\n  if (adapters) {\n    adapters.forEach(function (adapter) {\n      adapter(updates);\n    });\n  }\n\n  if (Platform.OS !== 'web') {\n    Object.keys(updates).forEach(function (key) {\n      if (ColorProperties.indexOf(key) !== -1) {\n        updates[key] = processColor(updates[key]);\n      }\n    });\n  }\n\n  var updatePropsInternal = typeof _updateProps === 'undefined' ? _updatePropsJS : _updateProps;\n  updatePropsInternal(viewDescriptor.value.tag, viewName, updates, maybeViewRef);\n};\nexport var updatePropsJestWrapper = function updatePropsJestWrapper(viewDescriptor, updates, maybeViewRef, adapters, animatedStyle) {\n  animatedStyle.current.value = _extends(_extends({}, animatedStyle.current.value), updates);\n  updateProps(viewDescriptor, updates, maybeViewRef, adapters);\n};\nexport default updateProps;","map":{"version":3,"sources":["C:/Users/perum/Documents/Harmony/frontend/HarmonyMobileApp/node_modules/react-native-reanimated/lib/reanimated2/UpdateProps.js"],"names":["processColor","makeShareable","isConfigured","_updatePropsJS","colorProps","ColorProperties","updateProps","viewDescriptor","updates","maybeViewRef","adapters","viewName","value","name","forEach","adapter","Platform","OS","Object","keys","key","indexOf","updatePropsInternal","_updateProps","tag","updatePropsJestWrapper","animatedStyle","current"],"mappings":";AAGA,SAASA,YAAT;AACA,SAASC,aAAT,EAAwBC,YAAxB;;AAEA,SAASC,cAAT;AAEA,IAAMC,UAAU,GAAG,CACf,iBADe,EAEf,mBAFe,EAGf,aAHe,EAIf,iBAJe,EAKf,kBALe,EAMf,gBANe,EAOf,kBAPe,EAQf,gBARe,EASf,OATe,EAUf,aAVe,EAWf,qBAXe,EAYf,WAZe,EAaf,iBAbe,EAcf,cAde,CAAnB;AAgBA,IAAMC,eAAe,GAAG,CAACH,YAAY,EAAb,GAAkB,EAAlB,GAAuBD,aAAa,CAACG,UAAD,CAA5D;AACA,OAAO,IAAME,WAAW,GAAG,SAAdA,WAAc,CAACC,cAAD,EAAiBC,OAAjB,EAA0BC,YAA1B,EAAwCC,QAAxC,EAAqD;AAC5E;;AACA,MAAMC,QAAQ,GAAGJ,cAAc,CAACK,KAAf,CAAqBC,IAArB,IAA6B,SAA9C;;AACA,MAAIH,QAAJ,EAAc;AACVA,IAAAA,QAAQ,CAACI,OAAT,CAAiB,UAACC,OAAD,EAAa;AAC1BA,MAAAA,OAAO,CAACP,OAAD,CAAP;AACH,KAFD;AAGH;;AACD,MAAIQ,QAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;AACvBC,IAAAA,MAAM,CAACC,IAAP,CAAYX,OAAZ,EAAqBM,OAArB,CAA6B,UAACM,GAAD,EAAS;AAClC,UAAIf,eAAe,CAACgB,OAAhB,CAAwBD,GAAxB,MAAiC,CAAC,CAAtC,EAAyC;AACrCZ,QAAAA,OAAO,CAACY,GAAD,CAAP,GAAepB,YAAY,CAACQ,OAAO,CAACY,GAAD,CAAR,CAA3B;AACH;AACJ,KAJD;AAKH;;AACD,MAAME,mBAAmB,GAAG,OAAOC,YAAP,KAAwB,WAAxB,GAAsCpB,cAAtC,GAAuDoB,YAAnF;AACAD,EAAAA,mBAAmB,CAACf,cAAc,CAACK,KAAf,CAAqBY,GAAtB,EAA2Bb,QAA3B,EAAqCH,OAArC,EAA8CC,YAA9C,CAAnB;AACH,CAjBM;AAkBP,OAAO,IAAMgB,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAClB,cAAD,EAAiBC,OAAjB,EAA0BC,YAA1B,EAAwCC,QAAxC,EAAkDgB,aAAlD,EAAoE;AACtGA,EAAAA,aAAa,CAACC,OAAd,CAAsBf,KAAtB,GAA8B,SAAc,SAAc,EAAd,EAAkBc,aAAa,CAACC,OAAd,CAAsBf,KAAxC,CAAd,EAA8DJ,OAA9D,CAA9B;AACAF,EAAAA,WAAW,CAACC,cAAD,EAAiBC,OAAjB,EAA0BC,YAA1B,EAAwCC,QAAxC,CAAX;AACH,CAHM;AAIP,eAAeJ,WAAf","sourcesContent":["/* global _updateProps */\r\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n// @ts-nocheck\r\nimport { processColor } from './Colors';\r\nimport { makeShareable, isConfigured } from './core';\r\nimport { Platform } from 'react-native';\r\nimport { _updatePropsJS } from './js-reanimated';\r\n// copied from react-native/Libraries/Components/View/ReactNativeStyleAttributes\r\nconst colorProps = [\r\n    'backgroundColor',\r\n    'borderBottomColor',\r\n    'borderColor',\r\n    'borderLeftColor',\r\n    'borderRightColor',\r\n    'borderTopColor',\r\n    'borderStartColor',\r\n    'borderEndColor',\r\n    'color',\r\n    'shadowColor',\r\n    'textDecorationColor',\r\n    'tintColor',\r\n    'textShadowColor',\r\n    'overlayColor',\r\n];\r\nconst ColorProperties = !isConfigured() ? [] : makeShareable(colorProps);\r\nexport const updateProps = (viewDescriptor, updates, maybeViewRef, adapters) => {\r\n    'worklet';\r\n    const viewName = viewDescriptor.value.name || 'RCTView';\r\n    if (adapters) {\r\n        adapters.forEach((adapter) => {\r\n            adapter(updates);\r\n        });\r\n    }\r\n    if (Platform.OS !== 'web') {\r\n        Object.keys(updates).forEach((key) => {\r\n            if (ColorProperties.indexOf(key) !== -1) {\r\n                updates[key] = processColor(updates[key]);\r\n            }\r\n        });\r\n    }\r\n    const updatePropsInternal = typeof _updateProps === 'undefined' ? _updatePropsJS : _updateProps;\r\n    updatePropsInternal(viewDescriptor.value.tag, viewName, updates, maybeViewRef);\r\n};\r\nexport const updatePropsJestWrapper = (viewDescriptor, updates, maybeViewRef, adapters, animatedStyle) => {\r\n    animatedStyle.current.value = Object.assign(Object.assign({}, animatedStyle.current.value), updates);\r\n    updateProps(viewDescriptor, updates, maybeViewRef, adapters);\r\n};\r\nexport default updateProps;\r\n"]},"metadata":{},"sourceType":"module"}