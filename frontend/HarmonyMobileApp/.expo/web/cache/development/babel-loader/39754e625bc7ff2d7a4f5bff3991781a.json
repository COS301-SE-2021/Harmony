{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport invariant from 'fbjs/lib/invariant';\nimport { adapt } from \"../core/AnimatedBlock\";\nimport { val } from \"../val\";\nimport AnimatedNode from \"./AnimatedNode\";\n\nvar AnimatedCond = function (_AnimatedNode) {\n  _inherits(AnimatedCond, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedCond);\n\n  function AnimatedCond(condition, ifBlock, elseBlock) {\n    var _this;\n\n    _classCallCheck(this, AnimatedCond);\n\n    invariant(condition instanceof AnimatedNode, \"Reanimated: Animated.cond node first argument should be of type AnimatedNode but got \" + condition);\n    invariant(ifBlock instanceof AnimatedNode, \"Reanimated: Animated.cond node second argument should be of type AnimatedNode but got \" + ifBlock);\n    invariant(elseBlock instanceof AnimatedNode || elseBlock === undefined, \"Reanimated: Animated.cond node third argument should be of type AnimatedNode or should be undefined but got \" + elseBlock);\n    _this = _super.call(this, {\n      type: 'cond',\n      cond: condition,\n      ifBlock: ifBlock,\n      elseBlock: elseBlock\n    }, [condition, ifBlock, elseBlock]);\n    _this._condition = condition;\n    _this._ifBlock = ifBlock;\n    _this._elseBlock = elseBlock;\n    return _this;\n  }\n\n  _createClass(AnimatedCond, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedCond, id: \" + this.__nodeID;\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      if (val(this._condition)) {\n        return val(this._ifBlock);\n      } else {\n        return this._elseBlock !== undefined ? val(this._elseBlock) : undefined;\n      }\n    }\n  }]);\n\n  return AnimatedCond;\n}(AnimatedNode);\n\nexport function createAnimatedCond(cond, ifBlock, elseBlock) {\n  return new AnimatedCond(adapt(cond), adapt(ifBlock), elseBlock === undefined ? undefined : adapt(elseBlock));\n}","map":{"version":3,"sources":["C:/Users/perum/Documents/Harmony/frontend/HarmonyMobileApp/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedCond.js"],"names":["invariant","adapt","val","AnimatedNode","AnimatedCond","condition","ifBlock","elseBlock","undefined","type","cond","_condition","_ifBlock","_elseBlock","__nodeID","createAnimatedCond"],"mappings":";;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,oBAAtB;AACA,SAASC,KAAT;AACA,SAASC,GAAT;AACA,OAAOC,YAAP;;IAEMC,Y;;;;;AAKJ,wBAAYC,SAAZ,EAAuBC,OAAvB,EAAgCC,SAAhC,EAA2C;AAAA;;AAAA;;AACzCP,IAAAA,SAAS,CACPK,SAAS,YAAYF,YADd,4FAEiFE,SAFjF,CAAT;AAIAL,IAAAA,SAAS,CACPM,OAAO,YAAYH,YADZ,6FAEkFG,OAFlF,CAAT;AAIAN,IAAAA,SAAS,CACPO,SAAS,YAAYJ,YAArB,IAAqCI,SAAS,KAAKC,SAD5C,mHAEwGD,SAFxG,CAAT;AAIA,8BACE;AACEE,MAAAA,IAAI,EAAE,MADR;AAEEC,MAAAA,IAAI,EAAEL,SAFR;AAGEC,MAAAA,OAAO,EAAPA,OAHF;AAIEC,MAAAA,SAAS,EAATA;AAJF,KADF,EAOE,CAACF,SAAD,EAAYC,OAAZ,EAAqBC,SAArB,CAPF;AASA,UAAKI,UAAL,GAAkBN,SAAlB;AACA,UAAKO,QAAL,GAAgBN,OAAhB;AACA,UAAKO,UAAL,GAAkBN,SAAlB;AAxByC;AAyB1C;;;;WAED,oBAAW;AACT,oCAA4B,KAAKO,QAAjC;AACD;;;WAED,wBAAe;AACb,UAAIZ,GAAG,CAAC,KAAKS,UAAN,CAAP,EAA0B;AACxB,eAAOT,GAAG,CAAC,KAAKU,QAAN,CAAV;AACD,OAFD,MAEO;AACL,eAAO,KAAKC,UAAL,KAAoBL,SAApB,GAAgCN,GAAG,CAAC,KAAKW,UAAN,CAAnC,GAAuDL,SAA9D;AACD;AACF;;;;EA1CwBL,Y;;AA6C3B,OAAO,SAASY,kBAAT,CAA4BL,IAA5B,EAAkCJ,OAAlC,EAA2CC,SAA3C,EAAsD;AAC3D,SAAO,IAAIH,YAAJ,CACLH,KAAK,CAACS,IAAD,CADA,EAELT,KAAK,CAACK,OAAD,CAFA,EAGLC,SAAS,KAAKC,SAAd,GAA0BA,SAA1B,GAAsCP,KAAK,CAACM,SAAD,CAHtC,CAAP;AAKD","sourcesContent":["import invariant from 'fbjs/lib/invariant';\r\nimport { adapt } from '../core/AnimatedBlock';\r\nimport { val } from '../val';\r\nimport AnimatedNode from './AnimatedNode';\r\n\r\nclass AnimatedCond extends AnimatedNode {\r\n  _condition;\r\n  _ifBlock;\r\n  _elseBlock;\r\n\r\n  constructor(condition, ifBlock, elseBlock) {\r\n    invariant(\r\n      condition instanceof AnimatedNode,\r\n      `Reanimated: Animated.cond node first argument should be of type AnimatedNode but got ${condition}`\r\n    );\r\n    invariant(\r\n      ifBlock instanceof AnimatedNode,\r\n      `Reanimated: Animated.cond node second argument should be of type AnimatedNode but got ${ifBlock}`\r\n    );\r\n    invariant(\r\n      elseBlock instanceof AnimatedNode || elseBlock === undefined,\r\n      `Reanimated: Animated.cond node third argument should be of type AnimatedNode or should be undefined but got ${elseBlock}`\r\n    );\r\n    super(\r\n      {\r\n        type: 'cond',\r\n        cond: condition,\r\n        ifBlock,\r\n        elseBlock,\r\n      },\r\n      [condition, ifBlock, elseBlock]\r\n    );\r\n    this._condition = condition;\r\n    this._ifBlock = ifBlock;\r\n    this._elseBlock = elseBlock;\r\n  }\r\n\r\n  toString() {\r\n    return `AnimatedCond, id: ${this.__nodeID}`;\r\n  }\r\n\r\n  __onEvaluate() {\r\n    if (val(this._condition)) {\r\n      return val(this._ifBlock);\r\n    } else {\r\n      return this._elseBlock !== undefined ? val(this._elseBlock) : undefined;\r\n    }\r\n  }\r\n}\r\n\r\nexport function createAnimatedCond(cond, ifBlock, elseBlock) {\r\n  return new AnimatedCond(\r\n    adapt(cond),\r\n    adapt(ifBlock),\r\n    elseBlock === undefined ? undefined : adapt(elseBlock)\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}