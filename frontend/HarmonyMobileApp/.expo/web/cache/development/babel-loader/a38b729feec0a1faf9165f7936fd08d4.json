{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport { CommonActions, DrawerActions, useLinkBuilder } from '@react-navigation/native';\nimport DrawerItem from \"./DrawerItem\";\nexport default function DrawerItemList(_ref) {\n  var state = _ref.state,\n      navigation = _ref.navigation,\n      descriptors = _ref.descriptors,\n      activeTintColor = _ref.activeTintColor,\n      inactiveTintColor = _ref.inactiveTintColor,\n      activeBackgroundColor = _ref.activeBackgroundColor,\n      inactiveBackgroundColor = _ref.inactiveBackgroundColor,\n      itemStyle = _ref.itemStyle,\n      labelStyle = _ref.labelStyle;\n  var buildLink = useLinkBuilder();\n  return state.routes.map(function (route, i) {\n    var focused = i === state.index;\n    var _descriptors$route$ke = descriptors[route.key].options,\n        title = _descriptors$route$ke.title,\n        drawerLabel = _descriptors$route$ke.drawerLabel,\n        drawerIcon = _descriptors$route$ke.drawerIcon;\n    return React.createElement(DrawerItem, {\n      key: route.key,\n      label: drawerLabel !== undefined ? drawerLabel : title !== undefined ? title : route.name,\n      icon: drawerIcon,\n      focused: focused,\n      activeTintColor: activeTintColor,\n      inactiveTintColor: inactiveTintColor,\n      activeBackgroundColor: activeBackgroundColor,\n      inactiveBackgroundColor: inactiveBackgroundColor,\n      labelStyle: labelStyle,\n      style: itemStyle,\n      to: buildLink(route.name, route.params),\n      onPress: function onPress() {\n        navigation.dispatch(_objectSpread(_objectSpread({}, focused ? DrawerActions.closeDrawer() : CommonActions.navigate(route.name)), {}, {\n          target: state.key\n        }));\n      }\n    });\n  });\n}","map":{"version":3,"sources":["DrawerItemList.tsx"],"names":["labelStyle","buildLink","useLinkBuilder","focused","i","state","drawerIcon","descriptors","route","drawerLabel","title","navigation","DrawerActions","CommonActions","target","key"],"mappings":";;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,aAAA,EAAA,aAAA,EAAA,cAAA,QAAA,0BAAA;AAOA,OAAA,UAAA;AAgBA,eAAe,SAAA,cAAA,OAUL;AAAA,MAV6B,KAU7B,QAV6B,KAU7B;AAAA,MAV6B,UAU7B,QAV6B,UAU7B;AAAA,MAV6B,WAU7B,QAV6B,WAU7B;AAAA,MAV6B,eAU7B,QAV6B,eAU7B;AAAA,MAV6B,iBAU7B,QAV6B,iBAU7B;AAAA,MAV6B,qBAU7B,QAV6B,qBAU7B;AAAA,MAV6B,uBAU7B,QAV6B,uBAU7B;AAAA,MAV6B,SAU7B,QAV6B,SAU7B;AAAA,MADRA,UACQ,QADRA,UACQ;AACR,MAAMC,SAAS,GAAGC,cAAlB,EAAA;AAEA,SAAQ,KAAK,CAAL,MAAA,CAAA,GAAA,CAAiB,UAAA,KAAA,EAAA,CAAA,EAAc;AACrC,QAAMC,OAAO,GAAGC,CAAC,KAAKC,KAAK,CAA3B,KAAA;AACA,gCAA2CE,WAAW,CAACC,KAAK,CAAjBD,GAAW,CAAXA,CAA3C,OAAA;AAAA,QAAM,KAAN,yBAAM,KAAN;AAAA,QAAM,WAAN,yBAAM,WAAN;AAAA,QAA4BD,UAA5B,yBAA4BA,UAA5B;AAEA,WACE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA;AACE,MAAA,GAAG,EAAEE,KAAK,CADZ,GAAA;AAEE,MAAA,KAAK,EACHC,WAAW,KAAXA,SAAAA,GAAAA,WAAAA,GAEIC,KAAK,KAALA,SAAAA,GAAAA,KAAAA,GAEAF,KAAK,CAPb,IAAA;AASE,MAAA,IAAI,EATN,UAAA;AAUE,MAAA,OAAO,EAVT,OAAA;AAWE,MAAA,eAAe,EAXjB,eAAA;AAYE,MAAA,iBAAiB,EAZnB,iBAAA;AAaE,MAAA,qBAAqB,EAbvB,qBAAA;AAcE,MAAA,uBAAuB,EAdzB,uBAAA;AAeE,MAAA,UAAU,EAfZ,UAAA;AAgBE,MAAA,KAAK,EAhBP,SAAA;AAiBE,MAAA,EAAE,EAAEP,SAAS,CAACO,KAAK,CAAN,IAAA,EAAaA,KAAK,CAjBjC,MAiBe,CAjBf;AAkBE,MAAA,OAAO,EAAE,mBAAM;AACbG,QAAAA,UAAU,CAAVA,QAAAA,iCACMR,OAAO,GACPS,aAAa,CADN,WACPA,EADO,GAEPC,aAAa,CAAbA,QAAAA,CAAuBL,KAAK,CAHd,IAGdK,CAHNF;AAIEG,UAAAA,MAAM,EAAET,KAAK,CAACU;AAJhBJ;AAMD;AAzBH,KAAA,CADF;AAJF,GAAQ,CAAR;AAkCD","sourcesContent":["import * as React from 'react';\nimport {\n  CommonActions,\n  DrawerActions,\n  DrawerNavigationState,\n  ParamListBase,\n  useLinkBuilder,\n} from '@react-navigation/native';\nimport DrawerItem from './DrawerItem';\nimport type {\n  DrawerNavigationHelpers,\n  DrawerDescriptorMap,\n  DrawerContentOptions,\n} from '../types';\n\ntype Props = Omit<DrawerContentOptions, 'contentContainerStyle' | 'style'> & {\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nexport default function DrawerItemList({\n  state,\n  navigation,\n  descriptors,\n  activeTintColor,\n  inactiveTintColor,\n  activeBackgroundColor,\n  inactiveBackgroundColor,\n  itemStyle,\n  labelStyle,\n}: Props) {\n  const buildLink = useLinkBuilder();\n\n  return (state.routes.map((route, i) => {\n    const focused = i === state.index;\n    const { title, drawerLabel, drawerIcon } = descriptors[route.key].options;\n\n    return (\n      <DrawerItem\n        key={route.key}\n        label={\n          drawerLabel !== undefined\n            ? drawerLabel\n            : title !== undefined\n            ? title\n            : route.name\n        }\n        icon={drawerIcon}\n        focused={focused}\n        activeTintColor={activeTintColor}\n        inactiveTintColor={inactiveTintColor}\n        activeBackgroundColor={activeBackgroundColor}\n        inactiveBackgroundColor={inactiveBackgroundColor}\n        labelStyle={labelStyle}\n        style={itemStyle}\n        to={buildLink(route.name, route.params)}\n        onPress={() => {\n          navigation.dispatch({\n            ...(focused\n              ? DrawerActions.closeDrawer()\n              : CommonActions.navigate(route.name)),\n            target: state.key,\n          });\n        }}\n      />\n    );\n  }) as React.ReactNode) as React.ReactElement;\n}\n"]},"metadata":{},"sourceType":"module"}