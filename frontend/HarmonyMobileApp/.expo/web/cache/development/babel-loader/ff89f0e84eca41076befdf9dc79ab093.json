{"ast":null,"code":"'use strict';\n\nimport invariant from 'fbjs/lib/invariant';\n\nvar EventSubscriptionVendor = function () {\n  function EventSubscriptionVendor() {\n    this._subscriptionsForType = {};\n  }\n\n  var _proto = EventSubscriptionVendor.prototype;\n\n  _proto.addSubscription = function addSubscription(eventType, subscription) {\n    invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');\n\n    if (!this._subscriptionsForType[eventType]) {\n      this._subscriptionsForType[eventType] = [];\n    }\n\n    var key = this._subscriptionsForType[eventType].length;\n\n    this._subscriptionsForType[eventType].push(subscription);\n\n    subscription.eventType = eventType;\n    subscription.key = key;\n    return subscription;\n  };\n\n  _proto.removeAllSubscriptions = function removeAllSubscriptions(eventType) {\n    if (eventType == null) {\n      this._subscriptionsForType = {};\n    } else {\n      delete this._subscriptionsForType[eventType];\n    }\n  };\n\n  _proto.removeSubscription = function removeSubscription(subscription) {\n    var eventType = subscription.eventType;\n    var key = subscription.key;\n    var subscriptionsForType = this._subscriptionsForType[eventType];\n\n    if (subscriptionsForType) {\n      delete subscriptionsForType[key];\n    }\n  };\n\n  _proto.getSubscriptionsForType = function getSubscriptionsForType(eventType) {\n    return this._subscriptionsForType[eventType];\n  };\n\n  return EventSubscriptionVendor;\n}();\n\nexport default EventSubscriptionVendor;","map":{"version":3,"sources":["C:/Users/perum/Documents/Harmony/frontend/HarmonyMobileApp/node_modules/react-native-web/dist/vendor/react-native/emitter/_EventSubscriptionVendor.js"],"names":["invariant","EventSubscriptionVendor","_subscriptionsForType","_proto","prototype","addSubscription","eventType","subscription","subscriber","key","length","push","removeAllSubscriptions","removeSubscription","subscriptionsForType","getSubscriptionsForType"],"mappings":"AASA;;AAEA,OAAOA,SAAP,MAAsB,oBAAtB;;AAMA,IAAIC,uBAAuB,GAAgB,YAAY;AACrD,WAASA,uBAAT,GAAmC;AACjC,SAAKC,qBAAL,GAA6B,EAA7B;AACD;;AASD,MAAIC,MAAM,GAAGF,uBAAuB,CAACG,SAArC;;AAEAD,EAAAA,MAAM,CAACE,eAAP,GAAyB,SAASA,eAAT,CAAyBC,SAAzB,EAAoCC,YAApC,EAAkD;AACzEP,IAAAA,SAAS,CAACO,YAAY,CAACC,UAAb,KAA4B,IAA7B,EAAmC,wDAAnC,CAAT;;AAEA,QAAI,CAAC,KAAKN,qBAAL,CAA2BI,SAA3B,CAAL,EAA4C;AAC1C,WAAKJ,qBAAL,CAA2BI,SAA3B,IAAwC,EAAxC;AACD;;AAED,QAAIG,GAAG,GAAG,KAAKP,qBAAL,CAA2BI,SAA3B,EAAsCI,MAAhD;;AAEA,SAAKR,qBAAL,CAA2BI,SAA3B,EAAsCK,IAAtC,CAA2CJ,YAA3C;;AAEAA,IAAAA,YAAY,CAACD,SAAb,GAAyBA,SAAzB;AACAC,IAAAA,YAAY,CAACE,GAAb,GAAmBA,GAAnB;AACA,WAAOF,YAAP;AACD,GAdD;;AAuBAJ,EAAAA,MAAM,CAACS,sBAAP,GAAgC,SAASA,sBAAT,CAAgCN,SAAhC,EAA2C;AACzE,QAAIA,SAAS,IAAI,IAAjB,EAAuB;AACrB,WAAKJ,qBAAL,GAA6B,EAA7B;AACD,KAFD,MAEO;AACL,aAAO,KAAKA,qBAAL,CAA2BI,SAA3B,CAAP;AACD;AACF,GAND;;AAeAH,EAAAA,MAAM,CAACU,kBAAP,GAA4B,SAASA,kBAAT,CAA4BN,YAA5B,EAA0C;AACpE,QAAID,SAAS,GAAGC,YAAY,CAACD,SAA7B;AACA,QAAIG,GAAG,GAAGF,YAAY,CAACE,GAAvB;AACA,QAAIK,oBAAoB,GAAG,KAAKZ,qBAAL,CAA2BI,SAA3B,CAA3B;;AAEA,QAAIQ,oBAAJ,EAA0B;AACxB,aAAOA,oBAAoB,CAACL,GAAD,CAA3B;AACD;AACF,GARD;;AAuBAN,EAAAA,MAAM,CAACY,uBAAP,GAAiC,SAASA,uBAAT,CAAiCT,SAAjC,EAA4C;AAC3E,WAAO,KAAKJ,qBAAL,CAA2BI,SAA3B,CAAP;AACD,GAFD;;AAIA,SAAOL,uBAAP;AACD,CAhF0C,EAA3C;;AAkFA,eAAeA,uBAAf","sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * \r\n */\r\n'use strict';\r\n\r\nimport invariant from 'fbjs/lib/invariant';\r\n\r\n/**\r\n * EventSubscriptionVendor stores a set of EventSubscriptions that are\r\n * subscribed to a particular event type.\r\n */\r\nvar EventSubscriptionVendor = /*#__PURE__*/function () {\r\n  function EventSubscriptionVendor() {\r\n    this._subscriptionsForType = {};\r\n  }\r\n  /**\r\n   * Adds a subscription keyed by an event type.\r\n   *\r\n   * @param {string} eventType\r\n   * @param {EventSubscription} subscription\r\n   */\r\n\r\n\r\n  var _proto = EventSubscriptionVendor.prototype;\r\n\r\n  _proto.addSubscription = function addSubscription(eventType, subscription) {\r\n    invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');\r\n\r\n    if (!this._subscriptionsForType[eventType]) {\r\n      this._subscriptionsForType[eventType] = [];\r\n    }\r\n\r\n    var key = this._subscriptionsForType[eventType].length;\r\n\r\n    this._subscriptionsForType[eventType].push(subscription);\r\n\r\n    subscription.eventType = eventType;\r\n    subscription.key = key;\r\n    return subscription;\r\n  }\r\n  /**\r\n   * Removes a bulk set of the subscriptions.\r\n   *\r\n   * @param {?string} eventType - Optional name of the event type whose\r\n   *   registered supscriptions to remove, if null remove all subscriptions.\r\n   */\r\n  ;\r\n\r\n  _proto.removeAllSubscriptions = function removeAllSubscriptions(eventType) {\r\n    if (eventType == null) {\r\n      this._subscriptionsForType = {};\r\n    } else {\r\n      delete this._subscriptionsForType[eventType];\r\n    }\r\n  }\r\n  /**\r\n   * Removes a specific subscription. Instead of calling this function, call\r\n   * `subscription.remove()` directly.\r\n   *\r\n   * @param {object} subscription\r\n   */\r\n  ;\r\n\r\n  _proto.removeSubscription = function removeSubscription(subscription) {\r\n    var eventType = subscription.eventType;\r\n    var key = subscription.key;\r\n    var subscriptionsForType = this._subscriptionsForType[eventType];\r\n\r\n    if (subscriptionsForType) {\r\n      delete subscriptionsForType[key];\r\n    }\r\n  }\r\n  /**\r\n   * Returns the array of subscriptions that are currently registered for the\r\n   * given event type.\r\n   *\r\n   * Note: This array can be potentially sparse as subscriptions are deleted\r\n   * from it when they are removed.\r\n   *\r\n   * TODO: This returns a nullable array. wat?\r\n   *\r\n   * @param {string} eventType\r\n   * @returns {?array}\r\n   */\r\n  ;\r\n\r\n  _proto.getSubscriptionsForType = function getSubscriptionsForType(eventType) {\r\n    return this._subscriptionsForType[eventType];\r\n  };\r\n\r\n  return EventSubscriptionVendor;\r\n}();\r\n\r\nexport default EventSubscriptionVendor;"]},"metadata":{},"sourceType":"module"}