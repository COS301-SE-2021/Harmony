{"ast":null,"code":"import _construct from \"@babel/runtime/helpers/construct\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport AnimatedNode from \"./AnimatedNode\";\nimport { createAnimatedCallFunc } from \"./AnimatedCallFunc\";\nimport { createAnimatedParam } from \"./AnimatedParam\";\nimport { val } from \"../val\";\nimport invariant from 'fbjs/lib/invariant';\n\nvar AnimatedFunction = function (_AnimatedNode) {\n  _inherits(AnimatedFunction, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedFunction);\n\n  function AnimatedFunction(what) {\n    var _this;\n\n    _classCallCheck(this, AnimatedFunction);\n\n    invariant(what instanceof AnimatedNode, \"Reanimated: AnimatedCallFunc 'what' argument should be of type AnimatedNode but got \" + what);\n\n    for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      params[_key - 1] = arguments[_key];\n    }\n\n    _this = _super.call(this, {\n      type: 'func',\n      what: what\n    }, [what].concat(params));\n    _this._what = what;\n\n    _this.__attach();\n\n    return _this;\n  }\n\n  _createClass(AnimatedFunction, [{\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      return val(this._what);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedFunction, id: \" + this.__nodeID;\n    }\n  }]);\n\n  return AnimatedFunction;\n}(AnimatedNode);\n\nexport function createAnimatedFunction(cb) {\n  var params = new Array(cb.length);\n\n  for (var i = 0; i < params.length; i++) {\n    params[i] = createAnimatedParam();\n  }\n\n  var what = cb.apply(void 0, params);\n\n  var func = _construct(AnimatedFunction, [what].concat(params));\n\n  return function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    if (args.length !== params.length) {\n      throw new Error('Parameter mismatch when calling reanimated function. Expected ' + params.length + ' parameters, got ' + args.length + '.');\n    }\n\n    return createAnimatedCallFunc(func, args, params);\n  };\n}","map":{"version":3,"sources":["C:/Users/perum/Documents/Harmony/frontend/HarmonyMobileApp/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedFunction.js"],"names":["AnimatedNode","createAnimatedCallFunc","createAnimatedParam","val","invariant","AnimatedFunction","what","params","type","_what","__attach","__nodeID","createAnimatedFunction","cb","Array","length","i","func","args","Error"],"mappings":";;;;;;;;;;;AAAA,OAAOA,YAAP;AACA,SAASC,sBAAT;AACA,SAASC,mBAAT;AACA,SAASC,GAAT;AACA,OAAOC,SAAP,MAAsB,oBAAtB;;IAEMC,gB;;;;;AAGJ,4BAAYC,IAAZ,EAA6B;AAAA;;AAAA;;AAC3BF,IAAAA,SAAS,CACPE,IAAI,YAAYN,YADT,2FAEgFM,IAFhF,CAAT;;AAD2B,sCAARC,MAAQ;AAARA,MAAAA,MAAQ;AAAA;;AAK3B,8BACE;AACEC,MAAAA,IAAI,EAAE,MADR;AAEEF,MAAAA,IAAI,EAAJA;AAFF,KADF,GAKGA,IALH,SAKYC,MALZ;AAOA,UAAKE,KAAL,GAAaH,IAAb;;AACA,UAAKI,QAAL;;AAb2B;AAc5B;;;;WAED,wBAAe;AACb,aAAOP,GAAG,CAAC,KAAKM,KAAN,CAAV;AACD;;;WAED,oBAAW;AACT,wCAAgC,KAAKE,QAArC;AACD;;;;EAzB4BX,Y;;AA4B/B,OAAO,SAASY,sBAAT,CAAgCC,EAAhC,EAAoC;AACzC,MAAMN,MAAM,GAAG,IAAIO,KAAJ,CAAUD,EAAE,CAACE,MAAb,CAAf;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,MAAM,CAACQ,MAA3B,EAAmCC,CAAC,EAApC,EAAwC;AACtCT,IAAAA,MAAM,CAACS,CAAD,CAAN,GAAYd,mBAAmB,EAA/B;AACD;;AAED,MAAMI,IAAI,GAAGO,EAAE,MAAF,SAAMN,MAAN,CAAb;;AACA,MAAMU,IAAI,cAAOZ,gBAAP,GAAwBC,IAAxB,SAAiCC,MAAjC,EAAV;;AACA,SAAO,YAAa;AAAA,uCAATW,IAAS;AAATA,MAAAA,IAAS;AAAA;;AAClB,QAAIA,IAAI,CAACH,MAAL,KAAgBR,MAAM,CAACQ,MAA3B,EAAmC;AACjC,YAAM,IAAII,KAAJ,CACJ,mEACEZ,MAAM,CAACQ,MADT,GAEE,mBAFF,GAGEG,IAAI,CAACH,MAHP,GAIE,GALE,CAAN;AAOD;;AACD,WAAOd,sBAAsB,CAACgB,IAAD,EAAOC,IAAP,EAAaX,MAAb,CAA7B;AACD,GAXD;AAYD","sourcesContent":["import AnimatedNode from './AnimatedNode';\r\nimport { createAnimatedCallFunc } from './AnimatedCallFunc';\r\nimport { createAnimatedParam } from './AnimatedParam';\r\nimport { val } from '../val';\r\nimport invariant from 'fbjs/lib/invariant';\r\n\r\nclass AnimatedFunction extends AnimatedNode {\r\n  _what;\r\n\r\n  constructor(what, ...params) {\r\n    invariant(\r\n      what instanceof AnimatedNode,\r\n      `Reanimated: AnimatedCallFunc 'what' argument should be of type AnimatedNode but got ${what}`\r\n    );\r\n    super(\r\n      {\r\n        type: 'func',\r\n        what,\r\n      },\r\n      [what, ...params]\r\n    );\r\n    this._what = what;\r\n    this.__attach();\r\n  }\r\n\r\n  __onEvaluate() {\r\n    return val(this._what);\r\n  }\r\n\r\n  toString() {\r\n    return `AnimatedFunction, id: ${this.__nodeID}`;\r\n  }\r\n}\r\n\r\nexport function createAnimatedFunction(cb) {\r\n  const params = new Array(cb.length);\r\n  for (let i = 0; i < params.length; i++) {\r\n    params[i] = createAnimatedParam();\r\n  }\r\n  // eslint-disable-next-line standard/no-callback-literal\r\n  const what = cb(...params);\r\n  const func = new AnimatedFunction(what, ...params);\r\n  return (...args) => {\r\n    if (args.length !== params.length) {\r\n      throw new Error(\r\n        'Parameter mismatch when calling reanimated function. Expected ' +\r\n          params.length +\r\n          ' parameters, got ' +\r\n          args.length +\r\n          '.'\r\n      );\r\n    }\r\n    return createAnimatedCallFunc(func, args, params);\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}