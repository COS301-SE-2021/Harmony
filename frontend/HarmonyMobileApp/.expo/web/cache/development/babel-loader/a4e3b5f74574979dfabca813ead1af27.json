{"ast":null,"code":"import React from 'react';\nimport { always, block } from \"../base\";\nexport default function useCode(nodeFactory, dependencies) {\n  if (!(React.useEffect instanceof Function)) return;\n  React.useEffect(function () {\n    if (!(nodeFactory instanceof Function)) {\n      console.warn('useCode() first argument should be a function that returns an animation node.');\n      var _node = nodeFactory;\n\n      nodeFactory = function nodeFactory() {\n        return _node;\n      };\n    }\n\n    var node = nodeFactory();\n\n    if (node) {\n      if (node instanceof Array) node = block(node);\n      var animatedAlways = always(node);\n\n      animatedAlways.__attach();\n\n      return function () {\n        return animatedAlways.__detach();\n      };\n    }\n  }, dependencies);\n}","map":{"version":3,"sources":["C:/Users/perum/Documents/Harmony/frontend/HarmonyMobileApp/node_modules/react-native-reanimated/lib/reanimated1/derived/useCode.js"],"names":["React","always","block","useCode","nodeFactory","dependencies","useEffect","Function","console","warn","node","Array","animatedAlways","__attach","__detach"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,KAAjB;AAaA,eAAe,SAASC,OAAT,CAAiBC,WAAjB,EAA8BC,YAA9B,EAA4C;AACzD,MAAI,EAAEL,KAAK,CAACM,SAAN,YAA2BC,QAA7B,CAAJ,EAA4C;AAE5CP,EAAAA,KAAK,CAACM,SAAN,CAAgB,YAAM;AAEpB,QAAI,EAAEF,WAAW,YAAYG,QAAzB,CAAJ,EAAwC;AACtCC,MAAAA,OAAO,CAACC,IAAR,CACE,+EADF;AAIA,UAAMC,KAAI,GAAGN,WAAb;;AACAA,MAAAA,WAAW,GAAG;AAAA,eAAMM,KAAN;AAAA,OAAd;AACD;;AAED,QAAIA,IAAI,GAAGN,WAAW,EAAtB;;AACA,QAAIM,IAAJ,EAAU;AAER,UAAIA,IAAI,YAAYC,KAApB,EAA2BD,IAAI,GAAGR,KAAK,CAACQ,IAAD,CAAZ;AAE3B,UAAME,cAAc,GAAGX,MAAM,CAACS,IAAD,CAA7B;;AACAE,MAAAA,cAAc,CAACC,QAAf;;AAGA,aAAO;AAAA,eAAMD,cAAc,CAACE,QAAf,EAAN;AAAA,OAAP;AACD;AACF,GAtBD,EAsBGT,YAtBH;AAuBD","sourcesContent":["import React from 'react';\r\nimport { always, block } from '../base';\r\n\r\n/**\r\n * @callback NodeFactory\r\n * Function to create a node or an array of nodes.\r\n * @returns {(Node[] | Node | null | undefined | Boolean)}\r\n */\r\n\r\n/**\r\n * React hook to run a node.\r\n * @param {NodeFactory} nodeFactory Function to build the node to run.\r\n * @param dependencies Array of dependencies. Refresh the node on changes.\r\n */\r\nexport default function useCode(nodeFactory, dependencies) {\r\n  if (!(React.useEffect instanceof Function)) return;\r\n\r\n  React.useEffect(() => {\r\n    // check and correct 1st parameter\r\n    if (!(nodeFactory instanceof Function)) {\r\n      console.warn(\r\n        'useCode() first argument should be a function that returns an animation node.'\r\n      );\r\n\r\n      const node = nodeFactory;\r\n      nodeFactory = () => node;\r\n    }\r\n\r\n    let node = nodeFactory();\r\n    if (node) {\r\n      // allow factory to return array\r\n      if (node instanceof Array) node = block(node);\r\n\r\n      const animatedAlways = always(node);\r\n      animatedAlways.__attach();\r\n\r\n      // return undo function\r\n      return () => animatedAlways.__detach();\r\n    }\r\n  }, dependencies);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}