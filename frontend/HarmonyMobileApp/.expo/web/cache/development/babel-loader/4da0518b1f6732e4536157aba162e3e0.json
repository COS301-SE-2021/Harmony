{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\nimport checkLegacyPathConfig from \"./checkLegacyPathConfig\";\nexport default function getStateFromPath(path, options) {\n  var _ref;\n\n  var _checkLegacyPathConfi = checkLegacyPathConfig(options),\n      _checkLegacyPathConfi2 = _slicedToArray(_checkLegacyPathConfi, 2),\n      legacy = _checkLegacyPathConfi2[0],\n      compatOptions = _checkLegacyPathConfi2[1];\n\n  var initialRoutes = [];\n\n  if (compatOptions !== null && compatOptions !== void 0 && compatOptions.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: compatOptions.initialRouteName,\n      parentScreens: []\n    });\n  }\n\n  var screens = compatOptions === null || compatOptions === void 0 ? void 0 : compatOptions.screens;\n  var remaining = path.replace(/\\/+/g, '/').replace(/^\\//, '').replace(/\\?.*$/, '');\n  remaining = remaining.endsWith('/') ? remaining : \"\".concat(remaining, \"/\");\n\n  if (screens === undefined) {\n    var routes = remaining.split('/').filter(Boolean).map(function (segment, i, self) {\n      var name = decodeURIComponent(segment);\n\n      if (i === self.length - 1) {\n        return {\n          name: name,\n          params: parseQueryParams(path)\n        };\n      }\n\n      return {\n        name: name\n      };\n    });\n\n    if (routes.length) {\n      return createNestedStateObject(routes, initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  var configs = (_ref = []).concat.apply(_ref, _toConsumableArray(Object.keys(screens).map(function (key) {\n    return createNormalizedConfigs(legacy, key, screens, [], initialRoutes, []);\n  }))).sort(function (a, b) {\n    if (a.pattern === b.pattern) {\n      return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n    }\n\n    if (a.pattern.startsWith(b.pattern)) {\n      return -1;\n    }\n\n    if (b.pattern.startsWith(a.pattern)) {\n      return 1;\n    }\n\n    var aParts = a.pattern.split('/');\n    var bParts = b.pattern.split('/');\n    var aWildcardIndex = aParts.indexOf('*');\n    var bWildcardIndex = bParts.indexOf('*');\n\n    if (aWildcardIndex === -1 && bWildcardIndex !== -1) {\n      return -1;\n    }\n\n    if (aWildcardIndex !== -1 && bWildcardIndex === -1) {\n      return 1;\n    }\n\n    if (aWildcardIndex === bWildcardIndex) {\n      return bParts.length - aParts.length;\n    }\n\n    return bWildcardIndex - aWildcardIndex;\n  });\n\n  configs.reduce(function (acc, config) {\n    if (acc[config.pattern]) {\n      var a = acc[config.pattern].routeNames;\n      var b = config.routeNames;\n      var intersects = a.length > b.length ? b.every(function (it, i) {\n        return a[i] === it;\n      }) : a.every(function (it, i) {\n        return b[i] === it;\n      });\n\n      if (!intersects) {\n        throw new Error(\"Found conflicting screens with the same pattern. The pattern '\".concat(config.pattern, \"' resolves to both '\").concat(a.join(' > '), \"' and '\").concat(b.join(' > '), \"'. Patterns must be unique and cannot resolve to more than one screen.\"));\n      }\n    }\n\n    return _extends(acc, _defineProperty({}, config.pattern, config));\n  }, {});\n\n  if (remaining === '/') {\n    var match = configs.find(function (config) {\n      return config.path === '' && config.routeNames.every(function (name) {\n        var _configs$find;\n\n        return !((_configs$find = configs.find(function (c) {\n          return c.screen === name;\n        })) !== null && _configs$find !== void 0 && _configs$find.path);\n      });\n    });\n\n    if (match) {\n      return createNestedStateObject(match.routeNames.map(function (name, i, self) {\n        if (i === self.length - 1) {\n          return {\n            name: name,\n            params: parseQueryParams(path, match.parse)\n          };\n        }\n\n        return {\n          name: name\n        };\n      }), initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  var result;\n  var current;\n\n  if (legacy === false) {\n    var _matchAgainstConfigs = matchAgainstConfigs(remaining, configs.map(function (c) {\n      return _objectSpread(_objectSpread({}, c), {}, {\n        regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n      });\n    })),\n        _routes = _matchAgainstConfigs.routes,\n        remainingPath = _matchAgainstConfigs.remainingPath;\n\n    if (_routes !== undefined) {\n      current = createNestedStateObject(_routes, initialRoutes);\n      remaining = remainingPath;\n      result = current;\n    }\n  } else {\n    while (remaining) {\n      var _matchAgainstConfigs2 = matchAgainstConfigs(remaining, configs),\n          _routes2 = _matchAgainstConfigs2.routes,\n          _remainingPath = _matchAgainstConfigs2.remainingPath;\n\n      remaining = _remainingPath;\n\n      if (_routes2 === undefined) {\n        var segments = remaining.split('/');\n        _routes2 = [{\n          name: decodeURIComponent(segments[0])\n        }];\n        segments.shift();\n        remaining = segments.join('/');\n      }\n\n      var state = createNestedStateObject(_routes2, initialRoutes);\n\n      if (current) {\n        var _current2;\n\n        while ((_current = current) !== null && _current !== void 0 && _current.routes[current.index || 0].state) {\n          var _current;\n\n          current = current.routes[current.index || 0].state;\n        }\n\n        current.routes[((_current2 = current) === null || _current2 === void 0 ? void 0 : _current2.index) || 0].state = state;\n      } else {\n        result = state;\n      }\n\n      current = state;\n    }\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  var route = findFocusedRoute(current);\n  var params = parseQueryParams(path, findParseConfigForRoute(route.name, configs));\n\n  if (params) {\n    route.params = _objectSpread(_objectSpread({}, route.params), params);\n  }\n\n  return result;\n}\n\nvar joinPaths = function joinPaths() {\n  var _ref2;\n\n  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n\n  return (_ref2 = []).concat.apply(_ref2, _toConsumableArray(paths.map(function (p) {\n    return p.split('/');\n  }))).filter(Boolean).join('/');\n};\n\nvar matchAgainstConfigs = function matchAgainstConfigs(remaining, configs) {\n  var routes;\n  var remainingPath = remaining;\n\n  var _loop = function _loop(config) {\n    if (!config.regex) {\n      return \"continue\";\n    }\n\n    var match = remainingPath.match(config.regex);\n\n    if (match) {\n      var matchedParams = (_config$pattern = config.pattern) === null || _config$pattern === void 0 ? void 0 : _config$pattern.split('/').filter(function (p) {\n        return p.startsWith(':');\n      }).reduce(function (acc, p, i) {\n        return _extends(acc, _defineProperty({}, p, match[(i + 1) * 2].replace(/\\//, '')));\n      }, {});\n      routes = config.routeNames.map(function (name) {\n        var _config$path;\n\n        var config = configs.find(function (c) {\n          return c.screen === name;\n        });\n        var params = config === null || config === void 0 ? void 0 : (_config$path = config.path) === null || _config$path === void 0 ? void 0 : _config$path.split('/').filter(function (p) {\n          return p.startsWith(':');\n        }).reduce(function (acc, p) {\n          var value = matchedParams[p];\n\n          if (value) {\n            var _config$parse;\n\n            var key = p.replace(/^:/, '').replace(/\\?$/, '');\n            acc[key] = (_config$parse = config.parse) !== null && _config$parse !== void 0 && _config$parse[key] ? config.parse[key](value) : value;\n          }\n\n          return acc;\n        }, {});\n\n        if (params && Object.keys(params).length) {\n          return {\n            name: name,\n            params: params\n          };\n        }\n\n        return {\n          name: name\n        };\n      });\n      remainingPath = remainingPath.replace(match[1], '');\n      return \"break\";\n    }\n  };\n\n  for (var _iterator = _createForOfIteratorHelperLoose(configs), _step; !(_step = _iterator()).done;) {\n    var config = _step.value;\n\n    var _config$pattern;\n\n    var _ret = _loop(config);\n\n    if (_ret === \"continue\") continue;\n    if (_ret === \"break\") break;\n  }\n\n  return {\n    routes: routes,\n    remainingPath: remainingPath\n  };\n};\n\nvar createNormalizedConfigs = function createNormalizedConfigs(legacy, screen, routeConfig) {\n  var routeNames = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  var initials = arguments.length > 4 ? arguments[4] : undefined;\n  var parentScreens = arguments.length > 5 ? arguments[5] : undefined;\n  var parentPattern = arguments.length > 6 ? arguments[6] : undefined;\n  var configs = [];\n  routeNames.push(screen);\n  parentScreens.push(screen);\n  var config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    var pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n    configs.push(createConfigItem(legacy, screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    var _pattern2;\n\n    if (typeof config.path === 'string') {\n      if (legacy) {\n        _pattern2 = config.exact !== true && parentPattern ? joinPaths(parentPattern, config.path) : config.path;\n      } else {\n        if (config.exact && config.path === undefined) {\n          throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n        }\n\n        _pattern2 = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n      }\n\n      configs.push(createConfigItem(legacy, screen, routeNames, _pattern2, config.path, config.parse));\n    }\n\n    if (config.screens) {\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens: parentScreens\n        });\n      }\n\n      Object.keys(config.screens).forEach(function (nestedConfig) {\n        var _pattern;\n\n        var result = createNormalizedConfigs(legacy, nestedConfig, config.screens, routeNames, initials, _toConsumableArray(parentScreens), (_pattern = _pattern2) !== null && _pattern !== void 0 ? _pattern : parentPattern);\n        configs.push.apply(configs, _toConsumableArray(result));\n      });\n    }\n  }\n\n  routeNames.pop();\n  return configs;\n};\n\nvar createConfigItem = function createConfigItem(legacy, screen, routeNames, pattern, path, parse) {\n  pattern = pattern.split('/').filter(Boolean).join('/');\n  var regex = pattern ? new RegExp(\"^(\".concat(pattern.split('/').map(function (it) {\n    if (legacy && it === '*') {\n      throw new Error(\"Please update your config to the new format to use wildcard pattern ('*'). https://reactnavigation.org/docs/configuring-links/#updating-config\");\n    }\n\n    if (it.startsWith(':')) {\n      return \"(([^/]+\\\\/)\".concat(it.endsWith('?') ? '?' : '', \")\");\n    }\n\n    return \"\".concat(it === '*' ? '.*' : escape(it), \"\\\\/\");\n  }).join(''), \")\")) : undefined;\n  return {\n    screen: screen,\n    regex: regex,\n    pattern: pattern,\n    path: path,\n    routeNames: _toConsumableArray(routeNames),\n    parse: parse\n  };\n};\n\nvar findParseConfigForRoute = function findParseConfigForRoute(routeName, flatConfig) {\n  for (var _iterator2 = _createForOfIteratorHelperLoose(flatConfig), _step2; !(_step2 = _iterator2()).done;) {\n    var config = _step2.value;\n\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n};\n\nvar findInitialRoute = function findInitialRoute(routeName, parentScreens, initialRoutes) {\n  for (var _iterator3 = _createForOfIteratorHelperLoose(initialRoutes), _step3; !(_step3 = _iterator3()).done;) {\n    var config = _step3.value;\n\n    if (parentScreens.length === config.parentScreens.length) {\n      var sameParents = true;\n\n      for (var i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n\n      if (sameParents) {\n        return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n      }\n    }\n  }\n\n  return undefined;\n};\n\nvar createStateObject = function createStateObject(initialRoute, route, isEmpty) {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, route]\n      };\n    } else {\n      return {\n        routes: [route]\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, _objectSpread(_objectSpread({}, route), {}, {\n          state: {\n            routes: []\n          }\n        })]\n      };\n    } else {\n      return {\n        routes: [_objectSpread(_objectSpread({}, route), {}, {\n          state: {\n            routes: []\n          }\n        })]\n      };\n    }\n  }\n};\n\nvar createNestedStateObject = function createNestedStateObject(routes, initialRoutes) {\n  var state;\n  var route = routes.shift();\n  var parentScreens = [];\n  var initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n  parentScreens.push(route.name);\n  state = createStateObject(initialRoute, route, routes.length === 0);\n\n  if (routes.length > 0) {\n    var nestedState = state;\n\n    while (route = routes.shift()) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n      var nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n      nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex].state;\n      }\n\n      parentScreens.push(route.name);\n    }\n  }\n\n  return state;\n};\n\nvar findFocusedRoute = function findFocusedRoute(state) {\n  var _current4;\n\n  var current = state;\n\n  while ((_current3 = current) !== null && _current3 !== void 0 && _current3.routes[current.index || 0].state) {\n    var _current3;\n\n    current = current.routes[current.index || 0].state;\n  }\n\n  var route = current.routes[((_current4 = current) === null || _current4 === void 0 ? void 0 : _current4.index) || 0];\n  return route;\n};\n\nvar parseQueryParams = function parseQueryParams(path, parseConfig) {\n  var query = path.split('?')[1];\n  var params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach(function (name) {\n      if (parseConfig[name] && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name]);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};","map":{"version":3,"sources":["getStateFromPath.tsx"],"names":["checkLegacyPathConfig","initialRoutes","compatOptions","initialRouteName","parentScreens","screens","remaining","routes","name","decodeURIComponent","i","self","params","parseQueryParams","createNestedStateObject","configs","Object","key","createNormalizedConfigs","a","b","aParts","bParts","aWildcardIndex","bWildcardIndex","acc","config","intersects","match","c","legacy","remainingPath","matchAgainstConfigs","regex","undefined","current","result","segments","state","route","findFocusedRoute","findParseConfigForRoute","joinPaths","paths","p","matchedParams","value","routeNames","routeConfig","pattern","parentPattern","createConfigItem","initials","nestedConfig","it","escape","screen","path","parse","routeName","findInitialRoute","sameParents","createStateObject","index","initialRoute","nestedState","nestedStateIndex","query","queryString","parseConfig"],"mappings":"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","sourcesContent":["import escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\nimport type {\n  NavigationState,\n  PartialState,\n  InitialState,\n} from '@react-navigation/routers';\nimport checkLegacyPathConfig from './checkLegacyPathConfig';\nimport type { PathConfigMap } from './types';\n\ntype Options = {\n  initialRouteName?: string;\n  screens: PathConfigMap;\n};\n\ntype ParseConfig = Record<string, (value: string) => any>;\n\ntype RouteConfig = {\n  screen: string;\n  regex?: RegExp;\n  path: string;\n  pattern: string;\n  routeNames: string[];\n  parse?: ParseConfig;\n};\n\ntype InitialRouteConfig = {\n  initialRouteName: string;\n  parentScreens: string[];\n};\n\ntype ResultState = PartialState<NavigationState> & {\n  state?: ResultState;\n};\n\ntype ParsedRoute = {\n  name: string;\n  params?: Record<string, any> | undefined;\n};\n\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * @example\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport default function getStateFromPath(\n  path: string,\n  options?: Options\n): ResultState | undefined {\n  const [legacy, compatOptions] = checkLegacyPathConfig(options);\n\n  let initialRoutes: InitialRouteConfig[] = [];\n\n  if (compatOptions?.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: compatOptions.initialRouteName,\n      parentScreens: [],\n    });\n  }\n\n  const screens = compatOptions?.screens;\n\n  let remaining = path\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining\n      .split('/')\n      .filter(Boolean)\n      .map((segment, i, self) => {\n        const name = decodeURIComponent(segment);\n\n        if (i === self.length - 1) {\n          return { name, params: parseQueryParams(path) };\n        }\n\n        return { name };\n      });\n\n    if (routes.length) {\n      return createNestedStateObject(routes, initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  // Create a normalized configs array which will be easier to use\n  const configs = ([] as RouteConfig[])\n    .concat(\n      ...Object.keys(screens).map((key) =>\n        createNormalizedConfigs(\n          legacy,\n          key,\n          screens as PathConfigMap,\n          [],\n          initialRoutes,\n          []\n        )\n      )\n    )\n    .sort((a, b) => {\n      // Sort config so that:\n      // - the most exhaustive ones are always at the beginning\n      // - patterns with wildcard are always at the end\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if (a.pattern === b.pattern) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if (a.pattern.startsWith(b.pattern)) {\n        return -1;\n      }\n\n      if (b.pattern.startsWith(a.pattern)) {\n        return 1;\n      }\n\n      const aParts = a.pattern.split('/');\n      const bParts = b.pattern.split('/');\n\n      const aWildcardIndex = aParts.indexOf('*');\n      const bWildcardIndex = bParts.indexOf('*');\n\n      // If only one of the patterns has a wildcard, move it down in the list\n      if (aWildcardIndex === -1 && bWildcardIndex !== -1) {\n        return -1;\n      }\n\n      if (aWildcardIndex !== -1 && bWildcardIndex === -1) {\n        return 1;\n      }\n\n      if (aWildcardIndex === bWildcardIndex) {\n        // If `b` has more `/`, it's more exhaustive\n        // So we move it up in the list\n        return bParts.length - aParts.length;\n      }\n\n      // If the wildcard appears later in the pattern (has higher index), it's more specific\n      // So we move it up in the list\n      return bWildcardIndex - aWildcardIndex;\n    });\n\n  // Check for duplicate patterns in the config\n  configs.reduce<Record<string, RouteConfig>>((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames;\n\n      // It's not a problem if the path string omitted from a inner most screen\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n      const intersects =\n        a.length > b.length\n          ? b.every((it, i) => a[i] === it)\n          : a.every((it, i) => b[i] === it);\n\n      if (!intersects) {\n        throw new Error(\n          `Found conflicting screens with the same pattern. The pattern '${\n            config.pattern\n          }' resolves to both '${a.join(' > ')}' and '${b.join(\n            ' > '\n          )}'. Patterns must be unique and cannot resolve to more than one screen.`\n        );\n      }\n    }\n\n    return Object.assign(acc, {\n      [config.pattern]: config,\n    });\n  }, {});\n\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(\n      (config) =>\n        config.path === '' &&\n        config.routeNames.every(\n          // Make sure that none of the parent configs have a non-empty path defined\n          (name) => !configs.find((c) => c.screen === name)?.path\n        )\n    );\n\n    if (match) {\n      return createNestedStateObject(\n        match.routeNames.map((name, i, self) => {\n          if (i === self.length - 1) {\n            return { name, params: parseQueryParams(path, match.parse) };\n          }\n\n          return { name };\n        }),\n        initialRoutes\n      );\n    }\n\n    return undefined;\n  }\n\n  let result: PartialState<NavigationState> | undefined;\n  let current: PartialState<NavigationState> | undefined;\n\n  if (legacy === false) {\n    // If we're not in legacy mode,, we match the whole path against the regex instead of segments\n    // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n    const { routes, remainingPath } = matchAgainstConfigs(\n      remaining,\n      configs.map((c) => ({\n        ...c,\n        // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n        regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\n      }))\n    );\n\n    if (routes !== undefined) {\n      // This will always be empty if full path matched\n      current = createNestedStateObject(routes, initialRoutes);\n      remaining = remainingPath;\n      result = current;\n    }\n  } else {\n    // In legacy mode, we divide the path into segments and match piece by piece\n    // This preserves the legacy behaviour, but we should remove it in next major\n    while (remaining) {\n      let { routes, remainingPath } = matchAgainstConfigs(remaining, configs);\n\n      remaining = remainingPath;\n\n      // If we hadn't matched any segments earlier, use the path as route name\n      if (routes === undefined) {\n        const segments = remaining.split('/');\n\n        routes = [{ name: decodeURIComponent(segments[0]) }];\n        segments.shift();\n        remaining = segments.join('/');\n      }\n\n      const state = createNestedStateObject(routes, initialRoutes);\n\n      if (current) {\n        // The state should be nested inside the deepest route we parsed before\n        while (current?.routes[current.index || 0].state) {\n          current = current.routes[current.index || 0].state;\n        }\n\n        (current as PartialState<NavigationState>).routes[\n          current?.index || 0\n        ].state = state;\n      } else {\n        result = state;\n      }\n\n      current = state;\n    }\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  const route = findFocusedRoute(current);\n  const params = parseQueryParams(\n    path,\n    findParseConfigForRoute(route.name, configs)\n  );\n\n  if (params) {\n    // @ts-expect-error: params should be treated as read-only, but we're creating the state here so it doesn't matter\n    route.params = { ...route.params, ...params };\n  }\n\n  return result;\n}\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst matchAgainstConfigs = (remaining: string, configs: RouteConfig[]) => {\n  let routes: ParsedRoute[] | undefined;\n  let remainingPath = remaining;\n\n  // Go through all configs, and see if the next path segment matches our regex\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n\n    const match = remainingPath.match(config.regex);\n\n    // If our regex matches, we need to extract params from the path\n    if (match) {\n      const matchedParams = config.pattern\n        ?.split('/')\n        .filter((p) => p.startsWith(':'))\n        .reduce<Record<string, any>>(\n          (acc, p, i) =>\n            Object.assign(acc, {\n              // The param segments appear every second item starting from 2 in the regex match result\n              [p]: match![(i + 1) * 2].replace(/\\//, ''),\n            }),\n          {}\n        );\n\n      routes = config.routeNames.map((name) => {\n        const config = configs.find((c) => c.screen === name);\n        const params = config?.path\n          ?.split('/')\n          .filter((p) => p.startsWith(':'))\n          .reduce<Record<string, any>>((acc, p) => {\n            const value = matchedParams[p];\n\n            if (value) {\n              const key = p.replace(/^:/, '').replace(/\\?$/, '');\n              acc[key] = config.parse?.[key] ? config.parse[key](value) : value;\n            }\n\n            return acc;\n          }, {});\n\n        if (params && Object.keys(params).length) {\n          return { name, params };\n        }\n\n        return { name };\n      });\n\n      remainingPath = remainingPath.replace(match[1], '');\n\n      break;\n    }\n  }\n\n  return { routes, remainingPath };\n};\n\nconst createNormalizedConfigs = (\n  legacy: boolean,\n  screen: string,\n  routeConfig: PathConfigMap,\n  routeNames: string[] = [],\n  initials: InitialRouteConfig[],\n  parentScreens: string[],\n  parentPattern?: string\n): RouteConfig[] => {\n  const configs: RouteConfig[] = [];\n\n  routeNames.push(screen);\n\n  parentScreens.push(screen);\n\n  const config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    configs.push(createConfigItem(legacy, screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern: string | undefined;\n\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === 'string') {\n      if (legacy) {\n        pattern =\n          config.exact !== true && parentPattern\n            ? joinPaths(parentPattern, config.path)\n            : config.path;\n      } else {\n        if (config.exact && config.path === undefined) {\n          throw new Error(\n            \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n          );\n        }\n\n        pattern =\n          config.exact !== true\n            ? joinPaths(parentPattern || '', config.path || '')\n            : config.path || '';\n      }\n\n      configs.push(\n        createConfigItem(\n          legacy,\n          screen,\n          routeNames,\n          pattern,\n          config.path,\n          config.parse\n        )\n      );\n    }\n\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens,\n        });\n      }\n\n      Object.keys(config.screens).forEach((nestedConfig) => {\n        const result = createNormalizedConfigs(\n          legacy,\n          nestedConfig,\n          config.screens as PathConfigMap,\n          routeNames,\n          initials,\n          [...parentScreens],\n          pattern ?? parentPattern\n        );\n\n        configs.push(...result);\n      });\n    }\n  }\n\n  routeNames.pop();\n\n  return configs;\n};\n\nconst createConfigItem = (\n  legacy: boolean,\n  screen: string,\n  routeNames: string[],\n  pattern: string,\n  path: string,\n  parse?: ParseConfig\n): RouteConfig => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n\n  const regex = pattern\n    ? new RegExp(\n        `^(${pattern\n          .split('/')\n          .map((it) => {\n            if (legacy && it === '*') {\n              throw new Error(\n                \"Please update your config to the new format to use wildcard pattern ('*'). https://reactnavigation.org/docs/configuring-links/#updating-config\"\n              );\n            }\n\n            if (it.startsWith(':')) {\n              return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n            }\n\n            return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n          })\n          .join('')})`\n      )\n    : undefined;\n\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse,\n  };\n};\n\nconst findParseConfigForRoute = (\n  routeName: string,\n  flatConfig: RouteConfig[]\n): ParseConfig | undefined => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (\n  routeName: string,\n  parentScreens: string[],\n  initialRoutes: InitialRouteConfig[]\n): string | undefined => {\n  for (const config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      let sameParents = true;\n      for (let i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName\n          ? config.initialRouteName\n          : undefined;\n      }\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (\n  initialRoute: string | undefined,\n  route: ParsedRoute,\n  isEmpty: boolean\n): InitialState => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, route],\n      };\n    } else {\n      return {\n        routes: [route],\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, { ...route, state: { routes: [] } }],\n      };\n    } else {\n      return {\n        routes: [{ ...route, state: { routes: [] } }],\n      };\n    }\n  }\n};\n\nconst createNestedStateObject = (\n  routes: ParsedRoute[],\n  initialRoutes: InitialRouteConfig[]\n) => {\n  let state: InitialState;\n  let route = routes.shift() as ParsedRoute;\n  const parentScreens: string[] = [];\n\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n  parentScreens.push(route.name);\n\n  state = createStateObject(initialRoute, route, routes.length === 0);\n\n  if (routes.length > 0) {\n    let nestedState = state;\n\n    while ((route = routes.shift() as ParsedRoute)) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n      const nestedStateIndex =\n        nestedState.index || nestedState.routes.length - 1;\n\n      nestedState.routes[nestedStateIndex].state = createStateObject(\n        initialRoute,\n        route,\n        routes.length === 0\n      );\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex]\n          .state as InitialState;\n      }\n\n      parentScreens.push(route.name);\n    }\n  }\n\n  return state;\n};\n\nconst findFocusedRoute = (state: InitialState) => {\n  let current: InitialState | undefined = state;\n\n  while (current?.routes[current.index || 0].state) {\n    // The query params apply to the deepest route\n    current = current.routes[current.index || 0].state;\n  }\n\n  const route = (current as PartialState<NavigationState>).routes[\n    current?.index || 0\n  ];\n\n  return route;\n};\n\nconst parseQueryParams = (\n  path: string,\n  parseConfig?: Record<string, (value: string) => any>\n) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach((name) => {\n      if (parseConfig[name] && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name] as string);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};\n"]},"metadata":{},"sourceType":"module"}