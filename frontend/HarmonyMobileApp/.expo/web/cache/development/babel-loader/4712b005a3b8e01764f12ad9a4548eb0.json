{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport invariant from 'fbjs/lib/invariant';\nimport AnimatedNode, { getCallID, setCallID } from \"./AnimatedNode\";\nimport AnimatedClock from \"./AnimatedClock\";\nimport { val } from \"../val\";\nexport var AnimatedParam = function (_AnimatedNode) {\n  _inherits(AnimatedParam, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedParam);\n\n  function AnimatedParam() {\n    var _this;\n\n    _classCallCheck(this, AnimatedParam);\n\n    _this = _super.call(this, {\n      type: 'param'\n    }, []);\n    _this.argsStack = [];\n\n    _this.__attach();\n\n    return _this;\n  }\n\n  _createClass(AnimatedParam, [{\n    key: \"beginContext\",\n    value: function beginContext(ref, prevCallID) {\n      this._prevCallID = prevCallID;\n      this.argsStack.push(ref);\n    }\n  }, {\n    key: \"endContext\",\n    value: function endContext() {\n      this.argsStack.pop();\n    }\n  }, {\n    key: \"_getTopNode\",\n    value: function _getTopNode() {\n      if (this.argsStack.length === 0) throw new Error(\"param: Invocation failed because argsStack is empty\");\n      var top = this.argsStack[this.argsStack.length - 1];\n      return top;\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value) {\n      var top = this._getTopNode();\n\n      if (top.setValue) {\n        var callID = getCallID();\n        setCallID(this._prevCallID);\n        top.setValue(value);\n        setCallID(callID);\n      } else {\n        throw new Error(\"param: setValue(\" + value + \") failed because the top element has no known method for updating it's current value.\");\n      }\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      var callID = getCallID();\n      setCallID(this._prevCallID);\n\n      var top = this._getTopNode();\n\n      var value = val(top);\n      setCallID(callID);\n      return value;\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      var node = this._getTopNode();\n\n      invariant(node instanceof AnimatedClock || node instanceof AnimatedParam, \"param: top node should be of type AnimatedClock but got \" + node);\n      node.start();\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      var node = this._getTopNode();\n\n      invariant(node instanceof AnimatedClock || node instanceof AnimatedParam, \"param: top node should be of type AnimatedClock but got \" + node);\n      node.stop();\n    }\n  }, {\n    key: \"isRunning\",\n    value: function isRunning() {\n      var node = this._getTopNode();\n\n      if (node instanceof AnimatedParam) {\n        return node.isRunning();\n      }\n\n      invariant(node instanceof AnimatedClock, \"param: top node should be of type AnimatedClock but got \" + node);\n      return node.isStarted();\n    }\n  }]);\n\n  return AnimatedParam;\n}(AnimatedNode);\nexport function createAnimatedParam() {\n  return new AnimatedParam();\n}","map":{"version":3,"sources":["C:/Users/perum/Documents/Harmony/frontend/HarmonyMobileApp/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedParam.js"],"names":["invariant","AnimatedNode","getCallID","setCallID","AnimatedClock","val","AnimatedParam","type","argsStack","__attach","ref","prevCallID","_prevCallID","push","pop","length","Error","top","value","_getTopNode","setValue","callID","node","start","stop","isRunning","isStarted","createAnimatedParam"],"mappings":";;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,oBAAtB;AACA,OAAOC,YAAP,IAAuBC,SAAvB,EAAkCC,SAAlC;AACA,OAAOC,aAAP;AACA,SAASC,GAAT;AAEA,WAAaC,aAAb;AAAA;;AAAA;;AAIE,2BAAc;AAAA;;AAAA;;AACZ,8BAAM;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAN,EAAyB,EAAzB;AADY,UAHdC,SAGc,GAHF,EAGE;;AAEZ,UAAKC,QAAL;;AAFY;AAGb;;AAPH;AAAA;AAAA,WASE,sBAAaC,GAAb,EAAkBC,UAAlB,EAA8B;AAC5B,WAAKC,WAAL,GAAmBD,UAAnB;AACA,WAAKH,SAAL,CAAeK,IAAf,CAAoBH,GAApB;AACD;AAZH;AAAA;AAAA,WAcE,sBAAa;AACX,WAAKF,SAAL,CAAeM,GAAf;AACD;AAhBH;AAAA;AAAA,WAkBE,uBAAc;AACZ,UAAI,KAAKN,SAAL,CAAeO,MAAf,KAA0B,CAA9B,EACE,MAAM,IAAIC,KAAJ,uDAAN;AACF,UAAMC,GAAG,GAAG,KAAKT,SAAL,CAAe,KAAKA,SAAL,CAAeO,MAAf,GAAwB,CAAvC,CAAZ;AACA,aAAOE,GAAP;AACD;AAvBH;AAAA;AAAA,WAyBE,kBAASC,KAAT,EAAgB;AACd,UAAMD,GAAG,GAAG,KAAKE,WAAL,EAAZ;;AACA,UAAIF,GAAG,CAACG,QAAR,EAAkB;AAChB,YAAMC,MAAM,GAAGnB,SAAS,EAAxB;AACAC,QAAAA,SAAS,CAAC,KAAKS,WAAN,CAAT;AACAK,QAAAA,GAAG,CAACG,QAAJ,CAAaF,KAAb;AACAf,QAAAA,SAAS,CAACkB,MAAD,CAAT;AACD,OALD,MAKO;AACL,cAAM,IAAIL,KAAJ,sBACeE,KADf,2FAAN;AAGD;AACF;AArCH;AAAA;AAAA,WAuCE,wBAAe;AACb,UAAMG,MAAM,GAAGnB,SAAS,EAAxB;AACAC,MAAAA,SAAS,CAAC,KAAKS,WAAN,CAAT;;AACA,UAAMK,GAAG,GAAG,KAAKE,WAAL,EAAZ;;AACA,UAAMD,KAAK,GAAGb,GAAG,CAACY,GAAD,CAAjB;AACAd,MAAAA,SAAS,CAACkB,MAAD,CAAT;AACA,aAAOH,KAAP;AACD;AA9CH;AAAA;AAAA,WAgDE,iBAAQ;AACN,UAAMI,IAAI,GAAG,KAAKH,WAAL,EAAb;;AACAnB,MAAAA,SAAS,CACPsB,IAAI,YAAYlB,aAAhB,IAAiCkB,IAAI,YAAYhB,aAD1C,+DAEoDgB,IAFpD,CAAT;AAIAA,MAAAA,IAAI,CAACC,KAAL;AACD;AAvDH;AAAA;AAAA,WAyDE,gBAAO;AACL,UAAMD,IAAI,GAAG,KAAKH,WAAL,EAAb;;AACAnB,MAAAA,SAAS,CACPsB,IAAI,YAAYlB,aAAhB,IAAiCkB,IAAI,YAAYhB,aAD1C,+DAEoDgB,IAFpD,CAAT;AAIAA,MAAAA,IAAI,CAACE,IAAL;AACD;AAhEH;AAAA;AAAA,WAkEE,qBAAY;AACV,UAAMF,IAAI,GAAG,KAAKH,WAAL,EAAb;;AAEA,UAAIG,IAAI,YAAYhB,aAApB,EAAmC;AACjC,eAAOgB,IAAI,CAACG,SAAL,EAAP;AACD;;AACDzB,MAAAA,SAAS,CACPsB,IAAI,YAAYlB,aADT,+DAEoDkB,IAFpD,CAAT;AAIA,aAAOA,IAAI,CAACI,SAAL,EAAP;AACD;AA7EH;;AAAA;AAAA,EAAmCzB,YAAnC;AAgFA,OAAO,SAAS0B,mBAAT,GAA+B;AACpC,SAAO,IAAIrB,aAAJ,EAAP;AACD","sourcesContent":["import invariant from 'fbjs/lib/invariant';\r\nimport AnimatedNode, { getCallID, setCallID } from './AnimatedNode';\r\nimport AnimatedClock from './AnimatedClock';\r\nimport { val } from '../val';\r\n\r\nexport class AnimatedParam extends AnimatedNode {\r\n  argsStack = [];\r\n  _prevCallID;\r\n\r\n  constructor() {\r\n    super({ type: 'param' }, []);\r\n    this.__attach();\r\n  }\r\n\r\n  beginContext(ref, prevCallID) {\r\n    this._prevCallID = prevCallID;\r\n    this.argsStack.push(ref);\r\n  }\r\n\r\n  endContext() {\r\n    this.argsStack.pop();\r\n  }\r\n\r\n  _getTopNode() {\r\n    if (this.argsStack.length === 0)\r\n      throw new Error(`param: Invocation failed because argsStack is empty`);\r\n    const top = this.argsStack[this.argsStack.length - 1];\r\n    return top;\r\n  }\r\n\r\n  setValue(value) {\r\n    const top = this._getTopNode();\r\n    if (top.setValue) {\r\n      const callID = getCallID();\r\n      setCallID(this._prevCallID);\r\n      top.setValue(value);\r\n      setCallID(callID);\r\n    } else {\r\n      throw new Error(\r\n        `param: setValue(${value}) failed because the top element has no known method for updating it's current value.`\r\n      );\r\n    }\r\n  }\r\n\r\n  __onEvaluate() {\r\n    const callID = getCallID();\r\n    setCallID(this._prevCallID);\r\n    const top = this._getTopNode();\r\n    const value = val(top);\r\n    setCallID(callID);\r\n    return value;\r\n  }\r\n\r\n  start() {\r\n    const node = this._getTopNode();\r\n    invariant(\r\n      node instanceof AnimatedClock || node instanceof AnimatedParam,\r\n      `param: top node should be of type AnimatedClock but got ${node}`\r\n    );\r\n    node.start();\r\n  }\r\n\r\n  stop() {\r\n    const node = this._getTopNode();\r\n    invariant(\r\n      node instanceof AnimatedClock || node instanceof AnimatedParam,\r\n      `param: top node should be of type AnimatedClock but got ${node}`\r\n    );\r\n    node.stop();\r\n  }\r\n\r\n  isRunning() {\r\n    const node = this._getTopNode();\r\n\r\n    if (node instanceof AnimatedParam) {\r\n      return node.isRunning();\r\n    }\r\n    invariant(\r\n      node instanceof AnimatedClock,\r\n      `param: top node should be of type AnimatedClock but got ${node}`\r\n    );\r\n    return node.isStarted();\r\n  }\r\n}\r\n\r\nexport function createAnimatedParam() {\r\n  return new AnimatedParam();\r\n}\r\n"]},"metadata":{},"sourceType":"module"}