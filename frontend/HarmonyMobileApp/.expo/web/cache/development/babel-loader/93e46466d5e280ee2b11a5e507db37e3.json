{"ast":null,"code":"import { createAnimatedPropAdapter } from \"./core\";\nexport var SVGAdapter = createAnimatedPropAdapter(function (props) {\n  'worklet';\n\n  var _a, _b;\n\n  var keys = Object.keys(props);\n\n  if (keys.includes('transform')) {\n    if (Array.isArray(props.transform)) {\n      if (props.transform.length !== 6) {\n        throw new Error(\"invalid transform length of \" + props.transform.length + \", should be 6\");\n      }\n\n      var transform = props.transform;\n      var x = (_a = props.x) !== null && _a !== void 0 ? _a : 0;\n      var y = (_b = props.y) !== null && _b !== void 0 ? _b : 0;\n      props.transform = [{\n        translateX: transform[0] * x + transform[2] * y + transform[4]\n      }, {\n        translateY: transform[1] * x + transform[3] * y + transform[5]\n      }];\n    } else if (typeof props.transform === 'string') {\n      var arr = props.transform.replace('translate(', '').replace(')', '').split(' ');\n      props.transform = [{\n        translateX: parseFloat(arr[0])\n      }, {\n        translateY: parseFloat(arr[1])\n      }];\n    }\n  }\n});\nexport var TextInputAdapter = createAnimatedPropAdapter(function (props) {\n  'worklet';\n\n  var keys = Object.keys(props);\n\n  if (keys.includes('value')) {\n    props.text = props.value;\n    delete props.value;\n  }\n}, ['text']);","map":{"version":3,"sources":["C:/Users/perum/Documents/Harmony/frontend/HarmonyMobileApp/node_modules/react-native-reanimated/lib/reanimated2/PropAdapters.js"],"names":["createAnimatedPropAdapter","SVGAdapter","props","_a","_b","keys","Object","includes","Array","isArray","transform","length","Error","x","y","translateX","translateY","arr","replace","split","parseFloat","TextInputAdapter","text","value"],"mappings":"AAEA,SAASA,yBAAT;AACA,OAAO,IAAMC,UAAU,GAAGD,yBAAyB,CAAC,UAACE,KAAD,EAAW;AAC3D;;AACA,MAAIC,EAAJ,EAAQC,EAAR;;AACA,MAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYH,KAAZ,CAAb;;AAEA,MAAIG,IAAI,CAACE,QAAL,CAAc,WAAd,CAAJ,EAAgC;AAC5B,QAAIC,KAAK,CAACC,OAAN,CAAcP,KAAK,CAACQ,SAApB,CAAJ,EAAoC;AAEhC,UAAIR,KAAK,CAACQ,SAAN,CAAgBC,MAAhB,KAA2B,CAA/B,EAAkC;AAC9B,cAAM,IAAIC,KAAJ,kCAAyCV,KAAK,CAACQ,SAAN,CAAgBC,MAAzD,mBAAN;AACH;;AACD,UAAMD,SAAS,GAAGR,KAAK,CAACQ,SAAxB;AACA,UAAMG,CAAC,GAAG,CAACV,EAAE,GAAGD,KAAK,CAACW,CAAZ,MAAmB,IAAnB,IAA2BV,EAAE,KAAK,KAAK,CAAvC,GAA2CA,EAA3C,GAAgD,CAA1D;AACA,UAAMW,CAAC,GAAG,CAACV,EAAE,GAAGF,KAAK,CAACY,CAAZ,MAAmB,IAAnB,IAA2BV,EAAE,KAAK,KAAK,CAAvC,GAA2CA,EAA3C,GAAgD,CAA1D;AACAF,MAAAA,KAAK,CAACQ,SAAN,GAAkB,CACd;AAAEK,QAAAA,UAAU,EAAEL,SAAS,CAAC,CAAD,CAAT,GAAeG,CAAf,GAAmBH,SAAS,CAAC,CAAD,CAAT,GAAeI,CAAlC,GAAsCJ,SAAS,CAAC,CAAD;AAA7D,OADc,EAEd;AAAEM,QAAAA,UAAU,EAAEN,SAAS,CAAC,CAAD,CAAT,GAAeG,CAAf,GAAmBH,SAAS,CAAC,CAAD,CAAT,GAAeI,CAAlC,GAAsCJ,SAAS,CAAC,CAAD;AAA7D,OAFc,CAAlB;AAIH,KAZD,MAaK,IAAI,OAAOR,KAAK,CAACQ,SAAb,KAA2B,QAA/B,EAAyC;AAG1C,UAAMO,GAAG,GAAGf,KAAK,CAACQ,SAAN,CACPQ,OADO,CACC,YADD,EACe,EADf,EAEPA,OAFO,CAEC,GAFD,EAEM,EAFN,EAGPC,KAHO,CAGD,GAHC,CAAZ;AAIAjB,MAAAA,KAAK,CAACQ,SAAN,GAAkB,CACd;AAAEK,QAAAA,UAAU,EAAEK,UAAU,CAACH,GAAG,CAAC,CAAD,CAAJ;AAAxB,OADc,EAEd;AAAED,QAAAA,UAAU,EAAEI,UAAU,CAACH,GAAG,CAAC,CAAD,CAAJ;AAAxB,OAFc,CAAlB;AAIH;AACJ;AAEJ,CAjCkD,CAA5C;AAkCP,OAAO,IAAMI,gBAAgB,GAAGrB,yBAAyB,CAAC,UAACE,KAAD,EAAW;AACjE;;AACA,MAAMG,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYH,KAAZ,CAAb;;AAEA,MAAIG,IAAI,CAACE,QAAL,CAAc,OAAd,CAAJ,EAA4B;AACxBL,IAAAA,KAAK,CAACoB,IAAN,GAAapB,KAAK,CAACqB,KAAnB;AACA,WAAOrB,KAAK,CAACqB,KAAb;AACH;AACJ,CARwD,EAQtD,CAAC,MAAD,CARsD,CAAlD","sourcesContent":["// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n// @ts-nocheck\r\nimport { createAnimatedPropAdapter } from './core';\r\nexport const SVGAdapter = createAnimatedPropAdapter((props) => {\r\n    'worklet';\r\n    var _a, _b;\r\n    const keys = Object.keys(props);\r\n    // transform\r\n    if (keys.includes('transform')) {\r\n        if (Array.isArray(props.transform)) {\r\n            // case of array with 6 values => https://github.com/react-native-svg/react-native-svg/blob/b2e2c355204ff4b10973d3afce1495f7e4167ff7/src/elements/Shape.tsx#L200\r\n            if (props.transform.length !== 6) {\r\n                throw new Error(`invalid transform length of ${props.transform.length}, should be 6`);\r\n            }\r\n            const transform = props.transform;\r\n            const x = (_a = props.x) !== null && _a !== void 0 ? _a : 0;\r\n            const y = (_b = props.y) !== null && _b !== void 0 ? _b : 0;\r\n            props.transform = [\r\n                { translateX: transform[0] * x + transform[2] * y + transform[4] },\r\n                { translateY: transform[1] * x + transform[3] * y + transform[5] },\r\n            ];\r\n        }\r\n        else if (typeof props.transform === 'string') {\r\n            // case of string 'translate(translateX translateY)'\r\n            // todo: handle other cases of transform string like here https://github.com/react-native-svg/react-native-svg/blob/b2e2c355204ff4b10973d3afce1495f7e4167ff7/src/lib/extract/extractTransform.ts#L184\r\n            const arr = props.transform\r\n                .replace('translate(', '')\r\n                .replace(')', '')\r\n                .split(' ');\r\n            props.transform = [\r\n                { translateX: parseFloat(arr[0]) },\r\n                { translateY: parseFloat(arr[1]) },\r\n            ];\r\n        }\r\n    }\r\n    // todo: other props\r\n});\r\nexport const TextInputAdapter = createAnimatedPropAdapter((props) => {\r\n    'worklet';\r\n    const keys = Object.keys(props);\r\n    // convert text to value like RN does here: https://github.com/facebook/react-native/blob/f2c6279ca497b34d5a2bfbb6f2d33dc7a7bea02a/Libraries/Components/TextInput/TextInput.js#L878\r\n    if (keys.includes('value')) {\r\n        props.text = props.value;\r\n        delete props.value;\r\n    }\r\n}, ['text']);\r\n"]},"metadata":{},"sourceType":"module"}