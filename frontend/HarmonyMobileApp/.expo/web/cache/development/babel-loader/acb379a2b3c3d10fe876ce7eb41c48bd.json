{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"active\", \"activityState\", \"style\", \"enabled\"];\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nexport * from \"./types\";\nvar ENABLE_SCREENS = true;\nexport function enableScreens() {\n  var shouldEnableScreens = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  ENABLE_SCREENS = shouldEnableScreens;\n}\nexport function screensEnabled() {\n  return ENABLE_SCREENS;\n}\nexport var NativeScreen = function (_React$Component) {\n  _inherits(NativeScreen, _React$Component);\n\n  var _super = _createSuper(NativeScreen);\n\n  function NativeScreen() {\n    _classCallCheck(this, NativeScreen);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(NativeScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          active = _this$props.active,\n          activityState = _this$props.activityState,\n          style = _this$props.style,\n          _this$props$enabled = _this$props.enabled,\n          enabled = _this$props$enabled === void 0 ? ENABLE_SCREENS : _this$props$enabled,\n          rest = _objectWithoutProperties(_this$props, _excluded);\n\n      if (enabled) {\n        if (active !== undefined && activityState === undefined) {\n          activityState = active !== 0 ? 2 : 0;\n        }\n\n        return React.createElement(View, _extends({\n          hidden: activityState === 0,\n          style: [style, {\n            display: activityState !== 0 ? 'flex' : 'none'\n          }]\n        }, rest));\n      }\n\n      return React.createElement(View, rest);\n    }\n  }]);\n\n  return NativeScreen;\n}(React.Component);\nexport var Screen = Animated.createAnimatedComponent(NativeScreen);\nexport var ScreenContainer = View;\nexport var NativeScreenContainer = View;\nexport var ScreenStack = View;\nexport var ScreenStackHeaderBackButtonImage = function ScreenStackHeaderBackButtonImage(props) {\n  return React.createElement(View, null, React.createElement(Image, _extends({\n    resizeMode: \"center\",\n    fadeDuration: 0\n  }, props)));\n};\nexport var ScreenStackHeaderRightView = function ScreenStackHeaderRightView(props) {\n  return React.createElement(View, props);\n};\nexport var ScreenStackHeaderLeftView = function ScreenStackHeaderLeftView(props) {\n  return React.createElement(View, props);\n};\nexport var ScreenStackHeaderCenterView = function ScreenStackHeaderCenterView(props) {\n  return React.createElement(View, props);\n};\nexport var ScreenStackHeaderConfig = View;\nexport var ScreenStackHeaderSubview = View;\nexport var shouldUseActivityState = true;","map":{"version":3,"sources":["index.tsx"],"names":["ENABLE_SCREENS","shouldEnableScreens","React","render","enabled","rest","active","activityState","display","Screen","Animated","ScreenContainer","NativeScreenContainer","ScreenStack","ScreenStackHeaderBackButtonImage","props","ScreenStackHeaderRightView","ScreenStackHeaderLeftView","ScreenStackHeaderCenterView","ScreenStackHeaderConfig","ScreenStackHeaderSubview","shouldUseActivityState"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;;;;AAUA;AAEA,IAAIA,cAAc,GAAlB,IAAA;AAEA,OAAO,SAAA,aAAA,GAAyD;AAAA,MAAlCC,mBAAkC,uEAAzD,IAAyD;AAC9DD,EAAAA,cAAc,GAAdA,mBAAAA;AACD;AAED,OAAO,SAAA,cAAA,GAAmC;AACxC,SAAA,cAAA;AACD;AAED,WAAO,YAAP;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WACEG,kBAAsB;AACpB,wBAMI,KANJ,KAAA;AAAA,UAAI,MAAJ,eAAI,MAAJ;AAAA,UAAI,aAAJ,eAAI,aAAJ;AAAA,UAAI,KAAJ,eAAI,KAAJ;AAAA,4CAIEC,OAJF;AAAA,UAIEA,OAJF,oCAAI,cAAJ;AAAA,UAKKC,IALL;;AAOA,UAAA,OAAA,EAAa;AACX,YAAIC,MAAM,KAANA,SAAAA,IAAwBC,aAAa,KAAzC,SAAA,EAAyD;AACvDA,UAAAA,aAAa,GAAGD,MAAM,KAANA,CAAAA,GAAAA,CAAAA,GADuC,CACvDC;AACD;;AACD,eACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AAEE,UAAA,MAAM,EAAEA,aAAa,KAFvB,CAAA;AAGE,UAAA,KAAK,EAAE,CAAA,KAAA,EAAQ;AAAEC,YAAAA,OAAO,EAAED,aAAa,KAAbA,CAAAA,GAAAA,MAAAA,GAA+B;AAA1C,WAAR;AAHT,SAAA,EADF,IACE,CAAA,CADF;AAQD;;AAED,aAAO,KAAA,CAAA,aAAA,CAAA,IAAA,EAAP,IAAO,CAAP;AACD;AAxBH;;AAAA;AAAA,EAAkCL,KAAK,CAAhC,SAAP;AA2BA,OAAO,IAAMO,MAAM,GAAGC,QAAQ,CAARA,uBAAAA,CAAf,YAAeA,CAAf;AAEP,OAAO,IAAMC,eAA0D,GAAhE,IAAA;AAEP,OAAO,IAAMC,qBAAgE,GAAtE,IAAA;AAEP,OAAO,IAAMC,WAAkD,GAAxD,IAAA;AAEP,OAAO,IAAMC,gCAAgC,GAC3CC,SADWD,gCACXC,CAAAA,KAD8C;AAAA,SAG9C,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,IAAA,EACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA;AAAO,IAAA,UAAU,EAAjB,QAAA;AAA2B,IAAA,YAAY,EAAE;AAAzC,GAAA,EAJG,KAIH,CAAA,CADF,CAH8C;AAAA,CAAzC;AAQP,OAAO,IAAMC,0BAA0B,GACrCD,SADWC,0BACXD,CAAAA,KADwC;AAAA,SAExB,KAAA,CAAA,aAAA,CAAA,IAAA,EAFX,KAEW,CAFwB;AAAA,CAAnC;AAIP,OAAO,IAAME,yBAAyB,GACpCF,SADWE,yBACXF,CAAAA,KADuC;AAAA,SAEvB,KAAA,CAAA,aAAA,CAAA,IAAA,EAFX,KAEW,CAFuB;AAAA,CAAlC;AAIP,OAAO,IAAMG,2BAA2B,GACtCH,SADWG,2BACXH,CAAAA,KADyC;AAAA,SAEzB,KAAA,CAAA,aAAA,CAAA,IAAA,EAFX,KAEW,CAFyB;AAAA,CAApC;AAIP,OAAO,IAAMI,uBAA0E,GAAhF,IAAA;AAEP,OAAO,IAAMC,wBAEX,GAFK,IAAA;AAIP,OAAO,IAAMC,sBAAsB,GAA5B,IAAA","sourcesContent":["import React from 'react';\nimport { Animated, View, ViewProps, ImageProps, Image } from 'react-native';\nimport {\n  ScreenProps,\n  ScreenContainerProps,\n  ScreenStackProps,\n  ScreenStackHeaderConfigProps,\n  HeaderSubviewTypes,\n} from './types';\n\nexport * from './types';\n\nlet ENABLE_SCREENS = true;\n\nexport function enableScreens(shouldEnableScreens = true): void {\n  ENABLE_SCREENS = shouldEnableScreens;\n}\n\nexport function screensEnabled(): boolean {\n  return ENABLE_SCREENS;\n}\n\nexport class NativeScreen extends React.Component<ScreenProps> {\n  render(): JSX.Element {\n    let {\n      active,\n      activityState,\n      style,\n      enabled = ENABLE_SCREENS,\n      ...rest\n    } = this.props;\n    if (enabled) {\n      if (active !== undefined && activityState === undefined) {\n        activityState = active !== 0 ? 2 : 0; // change taken from index.native.tsx\n      }\n      return (\n        <View\n          // @ts-expect-error: hidden exists on web, but not in React Native\n          hidden={activityState === 0}\n          style={[style, { display: activityState !== 0 ? 'flex' : 'none' }]}\n          {...rest}\n        />\n      );\n    }\n\n    return <View {...rest} />;\n  }\n}\n\nexport const Screen = Animated.createAnimatedComponent(NativeScreen);\n\nexport const ScreenContainer: React.ComponentType<ScreenContainerProps> = View;\n\nexport const NativeScreenContainer: React.ComponentType<ScreenContainerProps> = View;\n\nexport const ScreenStack: React.ComponentType<ScreenStackProps> = View;\n\nexport const ScreenStackHeaderBackButtonImage = (\n  props: ImageProps\n): JSX.Element => (\n  <View>\n    <Image resizeMode=\"center\" fadeDuration={0} {...props} />\n  </View>\n);\n\nexport const ScreenStackHeaderRightView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderLeftView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderCenterView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderConfig: React.ComponentType<ScreenStackHeaderConfigProps> = View;\n\nexport const ScreenStackHeaderSubview: React.ComponentType<React.PropsWithChildren<\n  ViewProps & { type?: HeaderSubviewTypes }\n>> = View;\n\nexport const shouldUseActivityState = true;\n"]},"metadata":{},"sourceType":"module"}