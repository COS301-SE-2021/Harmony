{"ast":null,"code":"import * as React from 'react';\nimport * as ResponderSystem from \"./ResponderSystem\";\nvar emptyObject = {};\nvar idCounter = 0;\n\nfunction useStable(getInitialValue) {\n  var ref = React.useRef(null);\n\n  if (ref.current == null) {\n    ref.current = getInitialValue();\n  }\n\n  return ref.current;\n}\n\nexport default function useResponderEvents(hostRef, config) {\n  if (config === void 0) {\n    config = emptyObject;\n  }\n\n  var id = useStable(function () {\n    return idCounter++;\n  });\n  var isAttachedRef = React.useRef(false);\n  React.useEffect(function () {\n    ResponderSystem.attachListeners();\n    return function () {\n      ResponderSystem.removeNode(id);\n    };\n  }, [id]);\n  React.useEffect(function () {\n    var _config = config,\n        onMoveShouldSetResponder = _config.onMoveShouldSetResponder,\n        onMoveShouldSetResponderCapture = _config.onMoveShouldSetResponderCapture,\n        onScrollShouldSetResponder = _config.onScrollShouldSetResponder,\n        onScrollShouldSetResponderCapture = _config.onScrollShouldSetResponderCapture,\n        onSelectionChangeShouldSetResponder = _config.onSelectionChangeShouldSetResponder,\n        onSelectionChangeShouldSetResponderCapture = _config.onSelectionChangeShouldSetResponderCapture,\n        onStartShouldSetResponder = _config.onStartShouldSetResponder,\n        onStartShouldSetResponderCapture = _config.onStartShouldSetResponderCapture;\n    var requiresResponderSystem = onMoveShouldSetResponder != null || onMoveShouldSetResponderCapture != null || onScrollShouldSetResponder != null || onScrollShouldSetResponderCapture != null || onSelectionChangeShouldSetResponder != null || onSelectionChangeShouldSetResponderCapture != null || onStartShouldSetResponder != null || onStartShouldSetResponderCapture != null;\n    var node = hostRef.current;\n\n    if (requiresResponderSystem) {\n      ResponderSystem.addNode(id, node, config);\n      isAttachedRef.current = true;\n    } else if (isAttachedRef.current) {\n      ResponderSystem.removeNode(id);\n      isAttachedRef.current = false;\n    }\n  }, [config, hostRef, id]);\n  React.useDebugValue({\n    isResponder: hostRef.current === ResponderSystem.getResponderNode()\n  });\n  React.useDebugValue(config);\n}","map":{"version":3,"sources":["C:/Users/perum/Documents/Harmony/frontend/HarmonyMobileApp/node_modules/react-native-web/dist/modules/useResponderEvents/index.js"],"names":["React","ResponderSystem","emptyObject","idCounter","useStable","getInitialValue","ref","useRef","current","useResponderEvents","hostRef","config","id","isAttachedRef","useEffect","attachListeners","removeNode","_config","onMoveShouldSetResponder","onMoveShouldSetResponderCapture","onScrollShouldSetResponder","onScrollShouldSetResponderCapture","onSelectionChangeShouldSetResponder","onSelectionChangeShouldSetResponderCapture","onStartShouldSetResponder","onStartShouldSetResponderCapture","requiresResponderSystem","node","addNode","useDebugValue","isResponder","getResponderNode"],"mappings":"AAkBA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,eAAZ;AACA,IAAIC,WAAW,GAAG,EAAlB;AACA,IAAIC,SAAS,GAAG,CAAhB;;AAEA,SAASC,SAAT,CAAmBC,eAAnB,EAAoC;AAClC,MAAIC,GAAG,GAAGN,KAAK,CAACO,MAAN,CAAa,IAAb,CAAV;;AAEA,MAAID,GAAG,CAACE,OAAJ,IAAe,IAAnB,EAAyB;AACvBF,IAAAA,GAAG,CAACE,OAAJ,GAAcH,eAAe,EAA7B;AACD;;AAED,SAAOC,GAAG,CAACE,OAAX;AACD;;AAED,eAAe,SAASC,kBAAT,CAA4BC,OAA5B,EAAqCC,MAArC,EAA6C;AAC1D,MAAIA,MAAM,KAAK,KAAK,CAApB,EAAuB;AACrBA,IAAAA,MAAM,GAAGT,WAAT;AACD;;AAED,MAAIU,EAAE,GAAGR,SAAS,CAAC,YAAY;AAC7B,WAAOD,SAAS,EAAhB;AACD,GAFiB,CAAlB;AAGA,MAAIU,aAAa,GAAGb,KAAK,CAACO,MAAN,CAAa,KAAb,CAApB;AAIAP,EAAAA,KAAK,CAACc,SAAN,CAAgB,YAAY;AAC1Bb,IAAAA,eAAe,CAACc,eAAhB;AACA,WAAO,YAAY;AACjBd,MAAAA,eAAe,CAACe,UAAhB,CAA2BJ,EAA3B;AACD,KAFD;AAGD,GALD,EAKG,CAACA,EAAD,CALH;AAOAZ,EAAAA,KAAK,CAACc,SAAN,CAAgB,YAAY;AAC1B,QAAIG,OAAO,GAAGN,MAAd;AAAA,QACIO,wBAAwB,GAAGD,OAAO,CAACC,wBADvC;AAAA,QAEIC,+BAA+B,GAAGF,OAAO,CAACE,+BAF9C;AAAA,QAGIC,0BAA0B,GAAGH,OAAO,CAACG,0BAHzC;AAAA,QAIIC,iCAAiC,GAAGJ,OAAO,CAACI,iCAJhD;AAAA,QAKIC,mCAAmC,GAAGL,OAAO,CAACK,mCALlD;AAAA,QAMIC,0CAA0C,GAAGN,OAAO,CAACM,0CANzD;AAAA,QAOIC,yBAAyB,GAAGP,OAAO,CAACO,yBAPxC;AAAA,QAQIC,gCAAgC,GAAGR,OAAO,CAACQ,gCAR/C;AASA,QAAIC,uBAAuB,GAAGR,wBAAwB,IAAI,IAA5B,IAAoCC,+BAA+B,IAAI,IAAvE,IAA+EC,0BAA0B,IAAI,IAA7G,IAAqHC,iCAAiC,IAAI,IAA1J,IAAkKC,mCAAmC,IAAI,IAAzM,IAAiNC,0CAA0C,IAAI,IAA/P,IAAuQC,yBAAyB,IAAI,IAApS,IAA4SC,gCAAgC,IAAI,IAA9W;AACA,QAAIE,IAAI,GAAGjB,OAAO,CAACF,OAAnB;;AAEA,QAAIkB,uBAAJ,EAA6B;AAC3BzB,MAAAA,eAAe,CAAC2B,OAAhB,CAAwBhB,EAAxB,EAA4Be,IAA5B,EAAkChB,MAAlC;AACAE,MAAAA,aAAa,CAACL,OAAd,GAAwB,IAAxB;AACD,KAHD,MAGO,IAAIK,aAAa,CAACL,OAAlB,EAA2B;AAChCP,MAAAA,eAAe,CAACe,UAAhB,CAA2BJ,EAA3B;AACAC,MAAAA,aAAa,CAACL,OAAd,GAAwB,KAAxB;AACD;AACF,GApBD,EAoBG,CAACG,MAAD,EAASD,OAAT,EAAkBE,EAAlB,CApBH;AAqBAZ,EAAAA,KAAK,CAAC6B,aAAN,CAAoB;AAClBC,IAAAA,WAAW,EAAEpB,OAAO,CAACF,OAAR,KAAoBP,eAAe,CAAC8B,gBAAhB;AADf,GAApB;AAGA/B,EAAAA,KAAK,CAAC6B,aAAN,CAAoBlB,MAApB;AACD","sourcesContent":["/**\r\n * Copyright (c) Nicolas Gallagher\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\r\n\r\n/**\r\n * Hook for integrating the Responder System into React\r\n *\r\n *   function SomeComponent({ onStartShouldSetResponder }) {\r\n *     const ref = useRef(null);\r\n *     useResponderEvents(ref, { onStartShouldSetResponder });\r\n *     return <div ref={ref} />\r\n *   }\r\n */\r\nimport * as React from 'react';\r\nimport * as ResponderSystem from './ResponderSystem';\r\nvar emptyObject = {};\r\nvar idCounter = 0;\r\n\r\nfunction useStable(getInitialValue) {\r\n  var ref = React.useRef(null);\r\n\r\n  if (ref.current == null) {\r\n    ref.current = getInitialValue();\r\n  }\r\n\r\n  return ref.current;\r\n}\r\n\r\nexport default function useResponderEvents(hostRef, config) {\r\n  if (config === void 0) {\r\n    config = emptyObject;\r\n  }\r\n\r\n  var id = useStable(function () {\r\n    return idCounter++;\r\n  });\r\n  var isAttachedRef = React.useRef(false); // This is a separate effects so it doesn't run when the config changes.\r\n  // On initial mount, attach global listeners if needed.\r\n  // On unmount, remove node potentially attached to the Responder System.\r\n\r\n  React.useEffect(function () {\r\n    ResponderSystem.attachListeners();\r\n    return function () {\r\n      ResponderSystem.removeNode(id);\r\n    };\r\n  }, [id]); // Register and unregister with the Responder System as necessary\r\n\r\n  React.useEffect(function () {\r\n    var _config = config,\r\n        onMoveShouldSetResponder = _config.onMoveShouldSetResponder,\r\n        onMoveShouldSetResponderCapture = _config.onMoveShouldSetResponderCapture,\r\n        onScrollShouldSetResponder = _config.onScrollShouldSetResponder,\r\n        onScrollShouldSetResponderCapture = _config.onScrollShouldSetResponderCapture,\r\n        onSelectionChangeShouldSetResponder = _config.onSelectionChangeShouldSetResponder,\r\n        onSelectionChangeShouldSetResponderCapture = _config.onSelectionChangeShouldSetResponderCapture,\r\n        onStartShouldSetResponder = _config.onStartShouldSetResponder,\r\n        onStartShouldSetResponderCapture = _config.onStartShouldSetResponderCapture;\r\n    var requiresResponderSystem = onMoveShouldSetResponder != null || onMoveShouldSetResponderCapture != null || onScrollShouldSetResponder != null || onScrollShouldSetResponderCapture != null || onSelectionChangeShouldSetResponder != null || onSelectionChangeShouldSetResponderCapture != null || onStartShouldSetResponder != null || onStartShouldSetResponderCapture != null;\r\n    var node = hostRef.current;\r\n\r\n    if (requiresResponderSystem) {\r\n      ResponderSystem.addNode(id, node, config);\r\n      isAttachedRef.current = true;\r\n    } else if (isAttachedRef.current) {\r\n      ResponderSystem.removeNode(id);\r\n      isAttachedRef.current = false;\r\n    }\r\n  }, [config, hostRef, id]);\r\n  React.useDebugValue({\r\n    isResponder: hostRef.current === ResponderSystem.getResponderNode()\r\n  });\r\n  React.useDebugValue(config);\r\n}"]},"metadata":{},"sourceType":"module"}